{
  "componentDescription": "",
  "propDescriptions": {
    "colors": { "description": "Color palette used to colorize multiple series." },
    "disableAxisListener": {
      "description": "If <code>true</code>, the charts will not listen to the mouse move event. It might break interactive features, but will improve performance."
    },
    "divisions": { "description": "The number of divisions in the radar grid." },
    "height": {
      "description": "The height of the chart in px. If not defined, it takes the height of the parent element."
    },
    "hideLegend": { "description": "If <code>true</code>, the legend is not rendered." },
    "highlight": {
      "description": "Indicates if the chart should highlight items per axis or per series."
    },
    "highlightedItem": {
      "description": "The highlighted item. Used when the highlight is controlled."
    },
    "id": {
      "description": "This prop is used to help implement the accessibility logic. If you don&#39;t provide this prop. It falls back to a randomly generated id."
    },
    "loading": { "description": "If <code>true</code>, a loading overlay is displayed." },
    "localeText": { "description": "Localized text for chart components." },
    "margin": {
      "description": "The margin between the SVG and the drawing area. It&#39;s used for leaving some space for extra information such as the x- and y-axis or legend.<br>Accepts a <code>number</code> to be used on all sides or an object with the optional properties: <code>top</code>, <code>bottom</code>, <code>left</code>, and <code>right</code>."
    },
    "onAreaClick": {
      "description": "Callback fired when an area is clicked.",
      "typeDescriptions": {
        "event": { "name": "event", "description": "The event source of the callback." },
        "radarItemIdentifier": {
          "name": "radarItemIdentifier",
          "description": "The radar item identifier."
        }
      }
    },
    "onAxisClick": {
      "description": "The function called for onClick events. The second argument contains information about all line/bar elements at the current mouse position.",
      "typeDescriptions": {
        "event": {
          "name": "event",
          "description": "The mouse event recorded on the <code>&lt;svg/&gt;</code> element."
        },
        "data": {
          "name": "data",
          "description": "The data about the clicked axis and items associated with it."
        }
      }
    },
    "onHighlightChange": {
      "description": "The callback fired when the highlighted item changes.",
      "typeDescriptions": {
        "highlightedItem": {
          "name": "highlightedItem",
          "description": "The newly highlighted item."
        }
      }
    },
    "onMarkClick": {
      "description": "Callback fired when a mark is clicked.",
      "typeDescriptions": {
        "event": { "name": "event", "description": "The event source of the callback." },
        "radarItemIdentifier": {
          "name": "radarItemIdentifier",
          "description": "The radar item identifier."
        }
      }
    },
    "radar": { "description": "The configuration of the radar scales." },
    "series": {
      "description": "The series to display in the bar chart. An array of <a href='/x/api/charts/radar-series/'>RadarSeries</a> objects."
    },
    "shape": { "description": "The grid shape." },
    "showToolbar": { "description": "If true, shows the default chart toolbar." },
    "skipAnimation": {
      "description": "If <code>true</code>, animations are skipped. If unset or <code>false</code>, the animations respects the user&#39;s <code>prefers-reduced-motion</code> setting."
    },
    "slotProps": { "description": "The props used for each component slot." },
    "slots": { "description": "Overridable component slots." },
    "stripeColor": {
      "description": "Get stripe fill color. Set it to <code>null</code> to remove stripes",
      "typeDescriptions": {
        "index": { "name": "index", "description": "The index of the stripe band." },
        "string": { "name": "string", "description": "The color to fill the stripe." }
      }
    },
    "width": {
      "description": "The width of the chart in px. If not defined, it takes the width of the parent element."
    }
  },
  "classDescriptions": {},
  "slotDescriptions": {
    "baseButton": "",
    "baseIconButton": "",
    "legend": "Custom rendering of the legend.",
    "loadingOverlay": "Overlay component rendered when the chart is in a loading state.",
    "noDataOverlay": "Overlay component rendered when the chart has no data to display.",
    "toolbar": "Custom component for the toolbar.",
    "tooltip": "Custom component for the tooltip popper."
  }
}

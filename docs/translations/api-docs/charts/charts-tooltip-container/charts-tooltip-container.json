{
  "componentDescription": "",
  "propDescriptions": {
    "anchorEl": {
      "description": "An HTML element, <a href=\"https://popper.js.org/docs/v2/virtual-elements/\">virtualElement</a>, or a function that returns either. It&#39;s used to set the position of the popper. The return value will passed as the reference object of the Popper instance."
    },
    "children": { "description": "Popper render function or node." },
    "classes": { "description": "Override or extend the styles applied to the component." },
    "component": {
      "description": "The component used for the root node. Either a string to use a HTML element or a component."
    },
    "components": {
      "description": "The components used for each slot inside the Popper. Either a string to use a HTML element or a component."
    },
    "componentsProps": { "description": "The props used for each slot inside the Popper." },
    "container": {
      "description": "An HTML element or function that returns one. The <code>container</code> will have the portal children appended to it.<br>You can also provide a callback, which is called in a React layout effect. This lets you set the container from a ref, and also makes server-side rendering possible.<br>By default, it uses the body of the top-level document object, so it&#39;s simply <code>document.body</code> most of the time."
    },
    "disablePortal": {
      "description": "The <code>children</code> will be under the DOM hierarchy of the parent component."
    },
    "keepMounted": {
      "description": "Always keep the children in the DOM. This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Popper."
    },
    "modifiers": {
      "description": "Popper.js is based on a &quot;plugin-like&quot; architecture, most of its features are fully encapsulated &quot;modifiers&quot;.<br>A modifier is a function that is called each time Popper.js needs to compute the position of the popper. For this reason, modifiers should be very performant to avoid bottlenecks. To learn how to create a modifier, <a href=\"https://popper.js.org/docs/v2/modifiers/\">read the modifiers documentation</a>."
    },
    "open": { "description": "If <code>true</code>, the component is shown." },
    "placement": { "description": "Popper placement." },
    "popperOptions": {
      "description": "Options provided to the <a href=\"https://popper.js.org/docs/v2/constructors/#options\"><code>Popper.js</code></a> instance."
    },
    "popperRef": { "description": "A ref that points to the used popper instance." },
    "slotProps": { "description": "The props used for each slot inside the Popper." },
    "slots": {
      "description": "The components used for each slot inside the Popper. Either a string to use a HTML element or a component."
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles."
    },
    "transition": {
      "description": "Help supporting a react-transition-group/Transition component."
    },
    "trigger": {
      "description": "Select the kind of tooltip to display - &#39;item&#39;: Shows data about the item below the mouse. - &#39;axis&#39;: Shows values associated with the hovered x value - &#39;none&#39;: Does not display tooltip"
    }
  },
  "classDescriptions": {
    "axisValueCell": {
      "description": "Styles applied to {{nodeName}}. Only available for axis tooltip.",
      "nodeName": "the axisValueCell element"
    },
    "cell": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the cell element" },
    "labelCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the labelCell element"
    },
    "mark": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the mark element" },
    "markCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the markCell element"
    },
    "paper": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the paper element" },
    "root": { "description": "Styles applied to the root element." },
    "row": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the row element" },
    "table": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the table element" },
    "valueCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the valueCell element"
    }
  }
}

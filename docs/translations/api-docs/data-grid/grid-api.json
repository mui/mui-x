{
  "interfaceDescription": "The full grid API.",
  "propertiesDescriptions": {
    "addRowGroupingCriteria": { "description": "Adds the field to the row grouping model." },
    "applySorting": { "description": "Applies the current sort model to the rows." },
    "autosizeColumns": {
      "description": "Auto-size the columns of the grid based on the cells&#39; content and the space available."
    },
    "deleteFilterItem": {
      "description": "Deletes a <a href=\"/x/api/data-grid/grid-filter-item/\">GridFilterItem</a>."
    },
    "exportDataAsCsv": { "description": "Downloads and exports a CSV of the grid&#39;s data." },
    "exportDataAsExcel": {
      "description": "Downloads and exports an Excel file of the grid&#39;s data."
    },
    "exportDataAsPrint": { "description": "Print the grid&#39;s data." },
    "exportState": {
      "description": "Generates a serializable object containing the exportable parts of the DataGrid state.<br />These values can then be passed to the <code>initialState</code> prop or injected using the <code>restoreState</code> method."
    },
    "forceUpdate": {
      "description": "Forces the grid to rerender. It&#39;s often used after a state update."
    },
    "getAllColumns": {
      "description": "Returns an array of <a href=\"/x/api/data-grid/grid-col-def/\">GridColDef</a> containing all the column definitions."
    },
    "getAllGroupDetails": { "description": "Returns the column group lookup." },
    "getAllRowIds": { "description": "Gets the list of row ids." },
    "getCellElement": {
      "description": "Gets the underlying DOM element for a cell at the given <code>id</code> and <code>field</code>."
    },
    "getCellMode": { "description": "Gets the mode of a cell." },
    "getCellParams": {
      "description": "Gets the <a href=\"/x/api/data-grid/grid-cell-params/\">GridCellParams</a> object that is passed as argument in events."
    },
    "getCellSelectionModel": {
      "description": "Returns an object containing the selection state of the cells.<br />The keys of the object correpond to the row IDs.<br />The value of each key is another object whose keys are the fields and values are the selection state."
    },
    "getCellValue": {
      "description": "Gets the value of a cell at the given <code>id</code> and <code>field</code>."
    },
    "getColumn": {
      "description": "Returns the <a href=\"/x/api/data-grid/grid-col-def/\">GridColDef</a> for the given <code>field</code>."
    },
    "getColumnGroupPath": {
      "description": "Returns the id of the groups leading to the requested column.<br />The array is ordered by increasing depth (the last element is the direct parent of the column)."
    },
    "getColumnHeaderElement": {
      "description": "Gets the underlying DOM element for the column header with the given <code>field</code>."
    },
    "getColumnHeaderParams": {
      "description": "Gets the GridColumnHeaderParams object that is passed as argument in events."
    },
    "getColumnIndex": {
      "description": "Returns the index position of a column. By default, only the visible columns are considered.<br />Pass <code>false</code> to <code>useVisibleColumns</code> to consider all columns."
    },
    "getColumnIndexRelativeToVisibleColumns": {
      "description": "Gets the index of a column relative to the columns that are reachable by scroll."
    },
    "getColumnPosition": {
      "description": "Returns the left-position of a column relative to the inner border of the grid."
    },
    "getDataAsCsv": {
      "description": "Returns the grid data as a CSV string.<br />This method is used internally by <code>exportDataAsCsv</code>."
    },
    "getDataAsExcel": {
      "description": "Returns the grid data as an exceljs workbook.<br />This method is used internally by <code>exportDataAsExcel</code>."
    },
    "getExpandedDetailPanels": { "description": "Returns the rows whose detail panel is open." },
    "getFilterState": {
      "description": "Returns the filter state for the given filter model without applying it to the Data Grid."
    },
    "getLocaleText": { "description": "Returns the translation for the <code>key</code>." },
    "getPinnedColumns": { "description": "Returns which columns are pinned." },
    "getRootDimensions": { "description": "Returns the dimensions of the grid" },
    "getRow": { "description": "Gets the row data with a given id." },
    "getRowElement": {
      "description": "Gets the underlying DOM element for a row at the given <code>id</code>."
    },
    "getRowGroupChildren": {
      "description": "Gets the rows of a grouping criteria.<br />Only contains the rows provided to the grid, not the rows automatically generated by it."
    },
    "getRowId": { "description": "Gets the ID of a row given its data." },
    "getRowIdFromRowIndex": {
      "description": "Gets the <code>GridRowId</code> of a row at a specific index.<br />The index is based on the sorted but unfiltered row list."
    },
    "getRowIndexRelativeToVisibleRows": {
      "description": "Gets the index of a row relative to the rows that are reachable by scroll."
    },
    "getRowMode": { "description": "Gets the mode of a row." },
    "getRowModels": {
      "description": "Gets the full set of rows as Map&lt;GridRowId, GridRowModel&gt;."
    },
    "getRowNode": { "description": "Gets the row node from the internal tree structure." },
    "getRowParams": {
      "description": "Gets the <a href=\"/x/api/data-grid/grid-row-params/\">GridRowParams</a> object that is passed as argument in events."
    },
    "getRowsCount": { "description": "Gets the total number of rows in the grid." },
    "getRowWithUpdatedValues": {
      "description": "Returns the row with the values that were set by editing the cells.<br />In row editing, <code>field</code> is ignored and all fields are considered."
    },
    "getScrollPosition": { "description": "Returns the current scroll position." },
    "getSelectedCellsAsArray": {
      "description": "Returns an array containing only the selected cells.<br />Each item is an object with the ID and field of the cell."
    },
    "getSelectedRows": { "description": "Returns an array of the selected rows." },
    "getSortedRowIds": {
      "description": "Returns all row ids sorted according to the active sort model."
    },
    "getSortedRows": {
      "description": "Returns all rows sorted according to the active sort model."
    },
    "getSortModel": { "description": "Returns the sort model currently applied to the grid." },
    "getVisibleColumns": { "description": "Returns the currently visible columns." },
    "hideColumnMenu": { "description": "Hides the column menu that is open." },
    "hideFilterPanel": { "description": "Hides the filter panel." },
    "hideHeaderFilterMenu": { "description": "Hides the header filter menu." },
    "hidePreferences": { "description": "Hides the preferences panel." },
    "ignoreDiacritics": {
      "description": "Returns the value of the <code>ignoreDiacritics</code> prop."
    },
    "isCellEditable": { "description": "Controls if a cell is editable." },
    "isCellSelected": { "description": "Determines if a cell is selected or not." },
    "isColumnPinned": { "description": "Returns which side a column is pinned to." },
    "isRowSelectable": { "description": "Determines if a row can be selected or not." },
    "isRowSelected": { "description": "Determines if a row is selected or not." },
    "pinColumn": { "description": "Pins a column to the left or right side of the grid." },
    "publishEvent": { "description": "Emits an event." },
    "removeRowGroupingCriteria": { "description": "Remove the field from the row grouping model." },
    "resetRowHeights": { "description": "Forces the recalculation of the heights of all rows." },
    "restoreState": { "description": "Inject the given values into the state of the DataGrid." },
    "scroll": {
      "description": "Triggers the viewport to scroll to the given positions (in pixels)."
    },
    "scrollToIndexes": {
      "description": "Triggers the viewport to scroll to the cell at indexes given by <code>params</code>.<br />Returns <code>true</code> if the grid had to scroll to reach the target."
    },
    "selectCellRange": {
      "description": "Selects all cells that are inside the range given by <code>start</code> and <code>end</code> coordinates."
    },
    "selectRow": { "description": "Change the selection state of a row." },
    "selectRowRange": {
      "description": "Change the selection state of all the selectable rows in a range."
    },
    "selectRows": { "description": "Change the selection state of multiple rows." },
    "setAggregationModel": {
      "description": "Sets the aggregation model to the one given by <code>model</code>."
    },
    "setCellFocus": {
      "description": "Sets the focus to the cell at the given <code>id</code> and <code>field</code>."
    },
    "setCellSelectionModel": {
      "description": "Updates the selected cells to be those passed to the <code>newModel</code> argument.<br />Any cell already selected will be unselected."
    },
    "setColumnHeaderFilterFocus": {
      "description": "Sets the focus to the column header filter at the given <code>field</code>."
    },
    "setColumnHeaderFocus": {
      "description": "Sets the focus to the column header at the given <code>field</code>."
    },
    "setColumnIndex": {
      "description": "Moves a column from its original position to the position given by <code>targetIndexPosition</code>."
    },
    "setColumnVisibility": {
      "description": "Changes the visibility of the column referred by <code>field</code>."
    },
    "setColumnVisibilityModel": {
      "description": "Sets the column visibility model to the one given by <code>model</code>."
    },
    "setColumnWidth": { "description": "Updates the width of a column." },
    "setDensity": { "description": "Sets the density of the grid." },
    "setEditCellValue": {
      "description": "Sets the value of the edit cell.<br />Commonly used inside the edit cell component."
    },
    "setExpandedDetailPanels": { "description": "Changes which rows to expand the detail panel." },
    "setFilterLogicOperator": {
      "description": "Changes the GridLogicOperator used to connect the filters."
    },
    "setFilterModel": {
      "description": "Sets the filter model to the one given by <code>model</code>."
    },
    "setLoading": { "description": "Sets the internal loading state." },
    "setPage": {
      "description": "Sets the displayed page to the value given by <code>page</code>."
    },
    "setPageSize": {
      "description": "Sets the number of displayed rows to the value given by <code>pageSize</code>."
    },
    "setPaginationMeta": { "description": "Sets the <code>paginationMeta</code> to a new value." },
    "setPaginationModel": {
      "description": "Sets the <code>paginationModel</code> to a new value."
    },
    "setPinnedColumns": { "description": "Changes the pinned columns." },
    "setQuickFilterValues": {
      "description": "Set the quick filter values to the one given by <code>values</code>"
    },
    "setRowChildrenExpansion": { "description": "Expand or collapse a row children." },
    "setRowCount": { "description": "Sets the <code>rowCount</code> to a new value." },
    "setRowGroupingCriteriaIndex": {
      "description": "Sets the grouping index of a grouping criteria."
    },
    "setRowGroupingModel": { "description": "Sets the columns to use as grouping criteria." },
    "setRowIndex": {
      "description": "Moves a row from its original position to the position given by <code>targetIndex</code>."
    },
    "setRows": { "description": "Sets a new set of rows." },
    "setRowSelectionModel": {
      "description": "Updates the selected rows to be those passed to the <code>rowIds</code> argument.<br />Any row already selected will be unselected."
    },
    "setSortModel": { "description": "Updates the sort model and triggers the sorting of rows." },
    "showColumnMenu": {
      "description": "Display the column menu under the <code>field</code> column."
    },
    "showFilterPanel": {
      "description": "Shows the filter panel. If <code>targetColumnField</code> is given, a filter for this field is also added."
    },
    "showHeaderFilterMenu": { "description": "Opens the header filter menu for the given field." },
    "showPreferences": {
      "description": "Displays the preferences panel. The <code>newValue</code> argument controls the content of the panel."
    },
    "sortColumn": { "description": "Sorts a column." },
    "startCellEditMode": {
      "description": "Puts the cell corresponding to the given row id and field into edit mode."
    },
    "startHeaderFilterEditMode": {
      "description": "Puts the cell corresponding to the given row id and field into edit mode."
    },
    "startRowEditMode": {
      "description": "Puts the row corresponding to the given id into edit mode."
    },
    "state": { "description": "Property that contains the whole state of the grid." },
    "stopCellEditMode": {
      "description": "Puts the cell corresponding to the given row id and field into view mode and updates the original row with the new value stored.<br />If <code>params.ignoreModifications</code> is <code>true</code> it will discard the modifications made."
    },
    "stopHeaderFilterEditMode": { "description": "Stops the edit mode for the current field." },
    "stopRowEditMode": {
      "description": "Puts the row corresponding to the given id and into view mode and updates the original row with the new values stored.<br />If <code>params.ignoreModifications</code> is <code>true</code> it will discard the modifications made."
    },
    "subscribeEvent": { "description": "Registers a handler for an event." },
    "toggleColumnMenu": {
      "description": "Toggles the column menu under the <code>field</code> column."
    },
    "toggleDetailPanel": { "description": "Expands or collapses the detail panel of a row." },
    "unpinColumn": { "description": "Unpins a column." },
    "unstable_dataSource": { "description": "The data source API." },
    "unstable_replaceRows": { "description": "Replace a set of rows with new rows." },
    "unstable_setColumnVirtualization": { "description": "Enable/disable column virtualization." },
    "unstable_setPinnedRows": { "description": "Changes the pinned rows." },
    "unstable_setVirtualization": { "description": "Enable/disable virtualization." },
    "updateColumns": {
      "description": "Updates the definition of multiple columns at the same time."
    },
    "updateRows": { "description": "Allows to update, insert and delete rows." },
    "upsertFilterItem": {
      "description": "Updates or inserts a <a href=\"/x/api/data-grid/grid-filter-item/\">GridFilterItem</a>."
    },
    "upsertFilterItems": {
      "description": "Updates or inserts many <a href=\"/x/api/data-grid/grid-filter-item/\">GridFilterItem</a>."
    }
  }
}

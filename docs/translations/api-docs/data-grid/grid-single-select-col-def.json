{
  "interfaceDescription": "Column Definition interface used for columns with the <code>singleSelect</code> type.",
  "propertiesDescriptions": {
    "field": {
      "description": "The unique identifier of the column. Used to map with GridRowModel values."
    },
    "type": { "description": "The type of the column." },
    "aggregable": {
      "description": "If <code>true</code>, the cells of the column can be aggregated based."
    },
    "align": { "description": "Align cell content." },
    "availableAggregationFunctions": {
      "description": "Limit the aggregation function usable on this column.<br />By default, the column will have all the aggregation functions that are compatible with its type."
    },
    "cellClassName": { "description": "Class name added to cells in this column." },
    "colSpan": { "description": "Number of columns a cell should span." },
    "description": {
      "description": "The tooltip text shown when the column header name is truncated."
    },
    "disableColumnMenu": {
      "description": "If <code>true</code>, the column menu is disabled for this column."
    },
    "disableExport": {
      "description": "If <code>true</code>, this column will not be included in exports."
    },
    "disableReorder": { "description": "If <code>true</code>, this column cannot be reordered." },
    "display": {
      "description": "Display mode for the cell:<br /> - &#39;text&#39;: For text-based cells (default)<br /> - &#39;flex&#39;: For cells with HTMLElement children"
    },
    "editable": { "description": "If <code>true</code>, the cells of the column are editable." },
    "filterable": { "description": "If <code>true</code>, the column is filterable." },
    "filterOperators": { "description": "Allows setting the filter operators for this column." },
    "flex": { "description": "The flex grow factor of the column. Must be a positive number." },
    "getApplyQuickFilterFn": {
      "description": "The callback that generates a filtering function for a given quick filter value.<br />This function can return <code>null</code> to skip filtering for this value and column."
    },
    "getOptionLabel": {
      "description": "Used to determine the label displayed for a given value option."
    },
    "getOptionValue": { "description": "Used to determine the value used for a value option." },
    "getSortComparator": {
      "description": "Provide an alternative comparator function for sorting.<br />Takes precedence over <code>sortComparator</code>."
    },
    "groupable": {
      "description": "If <code>true</code>, the rows can be grouped based on this column values (pro-plan only).<br />Only available in DataGridPremium."
    },
    "groupingValueGetter": {
      "description": "Function that transforms a complex cell value into a key that be used for grouping the rows."
    },
    "headerAlign": { "description": "Align column header content." },
    "headerClassName": { "description": "Class name added to the column header cell." },
    "headerName": { "description": "The title displayed in the column header cell." },
    "hideable": { "description": "If <code>false</code>, removes the option to hide this column." },
    "hideSortIcons": { "description": "Toggle the visibility of the sort icons." },
    "maxWidth": { "description": "The maximum width of the column in pixels." },
    "minWidth": { "description": "The minimum width of the column in pixels." },
    "pastedValueParser": {
      "description": "Function that takes the clipboard-pasted value and converts it to a value used internally."
    },
    "pinnable": {
      "description": "If <code>false</code>, the menu items for column pinning menu will not be rendered.<br />Only available in DataGridPro."
    },
    "preProcessEditCellProps": {
      "description": "Callback fired when the edit props of the cell changes.<br />Processes the props before being saved into the state."
    },
    "renderCell": { "description": "Override the component rendered as cell for this column." },
    "renderEditCell": {
      "description": "Override the component rendered in edit cell mode for this column."
    },
    "renderHeader": { "description": "Override the component rendered in the column header cell." },
    "renderHeaderFilter": {
      "description": "Allows to render a component in the column header filter cell."
    },
    "resizable": { "description": "If <code>false</code>, disables resizing for this column." },
    "rowSpanValueGetter": {
      "description": "Function that returns a specific value to be used in row spanning."
    },
    "sortable": { "description": "If <code>false</code>, disables sorting for this column." },
    "sortComparator": { "description": "A comparator function used to sort rows." },
    "sortingOrder": { "description": "The order of the sorting sequence." },
    "unstable_examples": {
      "description": "Example values that can be used by the grid to get more context about the column."
    },
    "valueFormatter": { "description": "Formats the cell value before rendering." },
    "valueGetter": {
      "description": "Function that returns specific data to render in the cell instead of using the field value."
    },
    "valueOptions": {
      "description": "To be used in combination with <code>type: &#39;singleSelect&#39;</code>. This is an array (or a function returning an array) of the possible cell values and labels."
    },
    "valueParser": {
      "description": "Function that takes the user-entered value and converts it to a value used internally."
    },
    "valueSetter": {
      "description": "Function that customizes how the entered value is stored in the row.<br />Only works with cell/row editing."
    },
    "width": { "description": "The width of the column in pixels." }
  }
}

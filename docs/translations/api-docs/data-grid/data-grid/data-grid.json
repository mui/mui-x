{
  "componentDescription": "",
  "propDescriptions": {
    "apiRef": {
      "description": "The ref object that allows Data Grid manipulation. Can be instantiated with <code>useGridApiRef()</code>."
    },
    "aria-label": { "description": "The label of the Data Grid." },
    "aria-labelledby": {
      "description": "The id of the element containing a label for the Data Grid."
    },
    "autoHeight": {
      "description": "If <code>true</code>, the Data Grid height is dynamic and follows the number of rows in the Data Grid."
    },
    "autoPageSize": {
      "description": "If <code>true</code>, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar."
    },
    "autosizeOnMount": {
      "description": "If <code>true</code>, columns are autosized after the datagrid is mounted."
    },
    "autosizeOptions": { "description": "The options for autosize when user-initiated." },
    "cellModesModel": { "description": "Controls the modes of the cells." },
    "checkboxSelection": {
      "description": "If <code>true</code>, the Data Grid will display an extra column with checkboxes for selecting rows."
    },
    "classes": { "description": "Override or extend the styles applied to the component." },
    "clipboardCopyCellDelimiter": {
      "description": "The character used to separate cell values when copying to the clipboard."
    },
    "columnBufferPx": {
      "description": "Column region in pixels to render before/after the viewport"
    },
    "columnGroupHeaderHeight": {
      "description": "Sets the height in pixels of the column group headers in the Data Grid. Inherits the <code>columnHeaderHeight</code> value if not set."
    },
    "columnHeaderHeight": {
      "description": "Sets the height in pixel of the column headers in the Data Grid."
    },
    "columns": {
      "description": "Set of columns of type <a href='/x/api/data-grid/grid-col-def/'>GridColDef</a>[]."
    },
    "columnVisibilityModel": {
      "description": "Set the column visibility model of the Data Grid. If defined, the Data Grid will ignore the <code>hide</code> property in <a href='/x/api/data-grid/grid-col-def/'>GridColDef</a>."
    },
    "density": { "description": "Set the density of the Data Grid." },
    "disableAutosize": {
      "description": "If <code>true</code>, column autosizing on header separator double-click is disabled."
    },
    "disableColumnFilter": { "description": "If <code>true</code>, column filters are disabled." },
    "disableColumnMenu": { "description": "If <code>true</code>, the column menu is disabled." },
    "disableColumnResize": { "description": "If <code>true</code>, resizing columns is disabled." },
    "disableColumnSelector": {
      "description": "If <code>true</code>, hiding/showing columns is disabled."
    },
    "disableColumnSorting": {
      "description": "If <code>true</code>, the column sorting feature will be disabled."
    },
    "disableDensitySelector": {
      "description": "If <code>true</code>, the density selector is disabled."
    },
    "disableEval": {
      "description": "If <code>true</code>, <code>eval()</code> is not used for performance optimization."
    },
    "disableMultipleRowSelection": {
      "description": "If <code>true</code>, multiple selection using the Ctrl/CMD or Shift key is disabled. The MIT DataGrid will ignore this prop, unless <code>checkboxSelection</code> is enabled."
    },
    "disableRowSelectionOnClick": {
      "description": "If <code>true</code>, the selection on click on a row or cell is disabled."
    },
    "disableVirtualization": {
      "description": "If <code>true</code>, the virtualization is disabled."
    },
    "editMode": { "description": "Controls whether to use the cell or row editing." },
    "estimatedRowCount": {
      "description": "Use if the actual rowCount is not known upfront, but an estimation is available. If some rows have children (for instance in the tree data), this number represents the amount of top level rows. Applicable only with <code>paginationMode=&quot;server&quot;</code> and when <code>rowCount=&quot;-1&quot;</code>"
    },
    "experimentalFeatures": {
      "description": "Unstable features, breaking changes might be introduced. For each feature, if the flag is not explicitly set to <code>true</code>, the feature will be fully disabled and any property / method call will not have any effect."
    },
    "filterDebounceMs": {
      "description": "The milliseconds delay to wait after a keystroke before triggering filtering."
    },
    "filterMode": {
      "description": "Filtering can be processed on the server or client-side. Set it to &#39;server&#39; if you would like to handle filtering on the server-side."
    },
    "filterModel": { "description": "Set the filter model of the Data Grid." },
    "getCellClassName": {
      "description": "Function that applies CSS classes dynamically on cells.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-cell-params/'>GridCellParams</a>.",
        "string": "The CSS class to apply to the cell."
      }
    },
    "getDetailPanelContent": {
      "description": "Function that returns the element to render in row detail.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-row-params/'>GridRowParams</a>.",
        "React.JSX.Element": "The row detail element."
      }
    },
    "getEstimatedRowHeight": {
      "description": "Function that returns the estimated height for a row. Only works if dynamic row height is used. Once the row height is measured this value is discarded.",
      "typeDescriptions": {
        "params": "With all properties from GridRowHeightParams.",
        "number | null": "The estimated row height value. If <code>null</code> or <code>undefined</code> then the default row height, based on the density, is applied."
      }
    },
    "getRowClassName": {
      "description": "Function that applies CSS classes dynamically on rows.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-row-class-name-params/'>GridRowClassNameParams</a>.",
        "string": "The CSS class to apply to the row."
      }
    },
    "getRowHeight": {
      "description": "Function that sets the row height per row.",
      "typeDescriptions": {
        "params": "With all properties from GridRowHeightParams.",
        "GridRowHeightReturnValue": "The row height value. If <code>null</code> or <code>undefined</code> then the default row height is applied. If &quot;auto&quot; then the row height is calculated based on the content."
      }
    },
    "getRowId": { "description": "Return the id of a given GridRowModel." },
    "getRowSpacing": {
      "description": "Function that allows to specify the spacing between rows.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-row-spacing-params/'>GridRowSpacingParams</a>.",
        "GridRowSpacing": "The row spacing values."
      }
    },
    "hideFooter": { "description": "If <code>true</code>, the footer component is hidden." },
    "hideFooterPagination": {
      "description": "If <code>true</code>, the pagination component in the footer is hidden."
    },
    "hideFooterSelectedRowCount": {
      "description": "If <code>true</code>, the selected row count in the footer is hidden."
    },
    "ignoreDiacritics": {
      "description": "If <code>true</code>, the diacritics (accents) are ignored when filtering or quick filtering. E.g. when filter value is <code>cafe</code>, the rows with <code>caf√©</code> will be visible."
    },
    "ignoreValueFormatterDuringExport": {
      "description": "If <code>true</code>, the Data Grid will not use <code>valueFormatter</code> when exporting to CSV or copying to clipboard. If an object is provided, you can choose to ignore the <code>valueFormatter</code> for CSV export or clipboard export."
    },
    "initialState": {
      "description": "The initial state of the DataGrid. The data in it will be set in the state on initialization but will not be controlled. If one of the data in <code>initialState</code> is also being controlled, then the control state wins."
    },
    "isCellEditable": {
      "description": "Callback fired when a cell is rendered, returns true if the cell is editable.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-cell-params/'>GridCellParams</a>.",
        "boolean": "A boolean indicating if the cell is editable."
      }
    },
    "isRowSelectable": {
      "description": "Determines if a row can be selected.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-row-params/'>GridRowParams</a>.",
        "boolean": "A boolean indicating if the row is selectable."
      }
    },
    "keepNonExistentRowsSelected": {
      "description": "If <code>true</code>, the selection model will retain selected rows that do not exist. Useful when using server side pagination and row selections need to be retained when changing pages."
    },
    "loading": { "description": "If <code>true</code>, a loading overlay is displayed." },
    "localeText": {
      "description": "Set the locale text of the Data Grid. You can find all the translation keys supported in <a href=\"https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts\">the source</a> in the GitHub repository."
    },
    "logger": {
      "description": "Pass a custom logger in the components that implements the Logger interface."
    },
    "logLevel": { "description": "Allows to pass the logging level or false to turn off logging." },
    "nonce": {
      "description": "Nonce of the inline styles for <a href=\"https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute\">Content Security Policy</a>."
    },
    "onCellClick": {
      "description": "Callback fired when any cell is clicked.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-cell-params/'>GridCellParams</a>.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onCellDoubleClick": {
      "description": "Callback fired when a double click event comes from a cell element.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-cell-params/'>GridCellParams</a>.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onCellEditStart": {
      "description": "Callback fired when the cell turns to edit mode.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-cell-params/'>GridCellParams</a>.",
        "event": "The event that caused this prop to be called."
      }
    },
    "onCellEditStop": {
      "description": "Callback fired when the cell turns to view mode.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-cell-params/'>GridCellParams</a>.",
        "event": "The event that caused this prop to be called."
      }
    },
    "onCellKeyDown": {
      "description": "Callback fired when a keydown event comes from a cell element.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-cell-params/'>GridCellParams</a>.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onCellModesModelChange": {
      "description": "Callback fired when the <code>cellModesModel</code> prop changes.",
      "typeDescriptions": {
        "cellModesModel": "Object containing which cells are in &quot;edit&quot; mode.",
        "details": "Additional details for this callback."
      }
    },
    "onClipboardCopy": {
      "description": "Callback called when the data is copied to the clipboard.",
      "typeDescriptions": { "data": "The data copied to the clipboard." }
    },
    "onColumnHeaderClick": {
      "description": "Callback fired when a click event comes from a column header element.",
      "typeDescriptions": {
        "params": "With all properties from GridColumnHeaderParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onColumnHeaderContextMenu": {
      "description": "Callback fired when a contextmenu event comes from a column header element.",
      "typeDescriptions": {
        "params": "With all properties from GridColumnHeaderParams.",
        "event": "The event object."
      }
    },
    "onColumnHeaderDoubleClick": {
      "description": "Callback fired when a double click event comes from a column header element.",
      "typeDescriptions": {
        "params": "With all properties from GridColumnHeaderParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onColumnHeaderEnter": {
      "description": "Callback fired when a mouse enter event comes from a column header element.",
      "typeDescriptions": {
        "params": "With all properties from GridColumnHeaderParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onColumnHeaderLeave": {
      "description": "Callback fired when a mouse leave event comes from a column header element.",
      "typeDescriptions": {
        "params": "With all properties from GridColumnHeaderParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onColumnHeaderOut": {
      "description": "Callback fired when a mouseout event comes from a column header element.",
      "typeDescriptions": {
        "params": "With all properties from GridColumnHeaderParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onColumnHeaderOver": {
      "description": "Callback fired when a mouseover event comes from a column header element.",
      "typeDescriptions": {
        "params": "With all properties from GridColumnHeaderParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onColumnOrderChange": {
      "description": "Callback fired when a column is reordered.",
      "typeDescriptions": {
        "params": "With all properties from GridColumnOrderChangeParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onColumnResize": {
      "description": "Callback fired while a column is being resized.",
      "typeDescriptions": {
        "params": "With all properties from GridColumnResizeParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onColumnVisibilityModelChange": {
      "description": "Callback fired when the column visibility model changes.",
      "typeDescriptions": {
        "model": "The new model.",
        "details": "Additional details for this callback."
      }
    },
    "onColumnWidthChange": {
      "description": "Callback fired when the width of a column is changed.",
      "typeDescriptions": {
        "params": "With all properties from GridColumnResizeParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onDensityChange": {
      "description": "Callback fired when the density changes.",
      "typeDescriptions": { "density": "New density value." }
    },
    "onFilterModelChange": {
      "description": "Callback fired when the Filter model changes before the filters are applied.",
      "typeDescriptions": {
        "model": "With all properties from <a href='/x/api/data-grid/grid-filter-model/'>GridFilterModel</a>.",
        "details": "Additional details for this callback."
      }
    },
    "onMenuClose": {
      "description": "Callback fired when the menu is closed.",
      "typeDescriptions": {
        "params": "With all properties from GridMenuParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onMenuOpen": {
      "description": "Callback fired when the menu is opened.",
      "typeDescriptions": {
        "params": "With all properties from GridMenuParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onPaginationMetaChange": {
      "description": "Callback fired when the pagination meta has changed.",
      "typeDescriptions": { "paginationMeta": "Updated pagination meta." }
    },
    "onPaginationModelChange": {
      "description": "Callback fired when the pagination model has changed.",
      "typeDescriptions": {
        "model": "Updated pagination model.",
        "details": "Additional details for this callback."
      }
    },
    "onPreferencePanelClose": {
      "description": "Callback fired when the preferences panel is closed.",
      "typeDescriptions": {
        "params": "With all properties from GridPreferencePanelParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onPreferencePanelOpen": {
      "description": "Callback fired when the preferences panel is opened.",
      "typeDescriptions": {
        "params": "With all properties from GridPreferencePanelParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onProcessRowUpdateError": {
      "description": "Callback called when <code>processRowUpdate</code> throws an error or rejects.",
      "typeDescriptions": { "error": "The error thrown." }
    },
    "onResize": {
      "description": "Callback fired when the Data Grid is resized.",
      "typeDescriptions": {
        "containerSize": "With all properties from ElementSize.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onRowClick": {
      "description": "Callback fired when a row is clicked. Not called if the target clicked is an interactive element added by the built-in columns.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-row-params/'>GridRowParams</a>.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onRowCountChange": {
      "description": "Callback fired when the row count has changed.",
      "typeDescriptions": { "count": "Updated row count." }
    },
    "onRowDoubleClick": {
      "description": "Callback fired when a double click event comes from a row container element.",
      "typeDescriptions": {
        "params": "With all properties from RowParams.",
        "event": "The event object.",
        "details": "Additional details for this callback."
      }
    },
    "onRowEditStart": {
      "description": "Callback fired when the row turns to edit mode.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-row-params/'>GridRowParams</a>.",
        "event": "The event that caused this prop to be called."
      }
    },
    "onRowEditStop": {
      "description": "Callback fired when the row turns to view mode.",
      "typeDescriptions": {
        "params": "With all properties from <a href='/x/api/data-grid/grid-row-params/'>GridRowParams</a>.",
        "event": "The event that caused this prop to be called."
      }
    },
    "onRowModesModelChange": {
      "description": "Callback fired when the <code>rowModesModel</code> prop changes.",
      "typeDescriptions": {
        "rowModesModel": "Object containing which rows are in &quot;edit&quot; mode.",
        "details": "Additional details for this callback."
      }
    },
    "onRowSelectionModelChange": {
      "description": "Callback fired when the selection state of one or multiple rows changes.",
      "typeDescriptions": {
        "rowSelectionModel": "With all the row ids GridSelectionModel.",
        "details": "Additional details for this callback."
      }
    },
    "onSortModelChange": {
      "description": "Callback fired when the sort model changes before a column is sorted.",
      "typeDescriptions": {
        "model": "With all properties from GridSortModel.",
        "details": "Additional details for this callback."
      }
    },
    "pageSizeOptions": { "description": "Select the pageSize dynamically using the component UI." },
    "paginationMeta": {
      "description": "The extra information about the pagination state of the Data Grid. Only applicable with <code>paginationMode=&quot;server&quot;</code>."
    },
    "paginationMode": {
      "description": "Pagination can be processed on the server or client-side. Set it to &#39;client&#39; if you would like to handle the pagination on the client-side. Set it to &#39;server&#39; if you would like to handle the pagination on the server-side."
    },
    "paginationModel": {
      "description": "The pagination model of type GridPaginationModel which refers to current <code>page</code> and <code>pageSize</code>."
    },
    "processRowUpdate": {
      "description": "Callback called before updating a row with new values in the row and cell editing.",
      "typeDescriptions": {
        "newRow": "Row object with the new values.",
        "oldRow": "Row object with the old values.",
        "params": "Additional parameters.",
        "Promise<R> | R": "The final values to update the row."
      }
    },
    "resizeThrottleMs": { "description": "The milliseconds throttle delay for resizing the grid." },
    "rowBufferPx": { "description": "Row region in pixels to render before/after the viewport" },
    "rowCount": {
      "description": "Set the total number of rows, if it is different from the length of the value <code>rows</code> prop. If some rows have children (for instance in the tree data), this number represents the amount of top level rows. Only works with <code>paginationMode=&quot;server&quot;</code>, ignored when <code>paginationMode=&quot;client&quot;</code>."
    },
    "rowHeight": { "description": "Sets the height in pixel of a row in the Data Grid." },
    "rowModesModel": { "description": "Controls the modes of the rows." },
    "rows": { "description": "Set of rows of type GridRowsProp." },
    "rowSelection": { "description": "If <code>false</code>, the row selection mode is disabled." },
    "rowSelectionModel": { "description": "Sets the row selection model of the Data Grid." },
    "rowSpacingType": {
      "description": "Sets the type of space between rows added by <code>getRowSpacing</code>."
    },
    "rowSpanning": {
      "description": "If <code>true</code>, the Data Grid will auto span the cells over the rows having the same value."
    },
    "scrollbarSize": {
      "description": "Override the height/width of the Data Grid inner scrollbar."
    },
    "showCellVerticalBorder": {
      "description": "If <code>true</code>, vertical borders will be displayed between cells."
    },
    "showColumnVerticalBorder": {
      "description": "If <code>true</code>, vertical borders will be displayed between column header items."
    },
    "slotProps": {
      "description": "Overridable components props dynamically passed to the component at rendering."
    },
    "slots": { "description": "Overridable components." },
    "sortingMode": {
      "description": "Sorting can be processed on the server or client-side. Set it to &#39;client&#39; if you would like to handle sorting on the client-side. Set it to &#39;server&#39; if you would like to handle sorting on the server-side."
    },
    "sortingOrder": { "description": "The order of the sorting sequence." },
    "sortModel": { "description": "Set the sort model of the Data Grid." },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles."
    },
    "virtualizeColumnsWithAutoRowHeight": {
      "description": "If <code>true</code>, the Data Grid enables column virtualization when <code>getRowHeight</code> is set to <code>() =&gt; &#39;auto&#39;</code>. By default, column virtualization is disabled when dynamic row height is enabled to measure the row height correctly. For datasets with a large number of columns, this can cause performance issues. The downside of enabling this prop is that the row height will be estimated based the cells that are currently rendered, which can cause row height change when scrolling horizontally."
    }
  },
  "classDescriptions": {
    "actionsCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root element of the cell with type=&quot;actions&quot;"
    },
    "aggregationColumnHeader": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element of the column header",
      "conditions": "aggregated"
    },
    "aggregationColumnHeader--alignCenter": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element of the header",
      "conditions": "aggregation if <code>headerAlign=\"center\"</code>"
    },
    "aggregationColumnHeader--alignLeft": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element of the header",
      "conditions": "aggregation if <code>headerAlign=\"left\"</code>"
    },
    "aggregationColumnHeader--alignRight": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element of the header",
      "conditions": "aggregation if <code>headerAlign=\"right\"</code>"
    },
    "aggregationColumnHeaderLabel": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the aggregation label in the column header",
      "conditions": "aggregated"
    },
    "autoHeight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>autoHeight={true}</code>"
    },
    "autosizing": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root element while it is being autosized"
    },
    "booleanCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the icon of the boolean cell"
    },
    "cell--editable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "the cell is editable"
    },
    "cell--editing": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "the cell is in edit mode"
    },
    "cell--flex": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the cell element in flex display mode"
    },
    "cell--pinnedLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is pinned to the left"
    },
    "cell--pinnedRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is pinned to the right"
    },
    "cell--rangeBottom": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is at the bottom edge of a cell selection range"
    },
    "cell--rangeLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is at the left edge of a cell selection range"
    },
    "cell--rangeRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is at the right edge of a cell selection range"
    },
    "cell--rangeTop": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is at the top edge of a cell selection range"
    },
    "cell--selectionMode": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "it is in a cell selection range"
    },
    "cell--textCenter": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "<code>align=\"center\"</code>"
    },
    "cell--textLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "<code>align=\"left\"</code>"
    },
    "cell--textRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the cell element",
      "conditions": "<code>align=\"right\"</code>"
    },
    "cell--withLeftBorder": {
      "description": "Styles applied the cell if <code>showColumnVerticalBorder={true}</code>."
    },
    "cell--withRightBorder": {
      "description": "Styles applied the cell if <code>showColumnVerticalBorder={true}</code>."
    },
    "cellCheckbox": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the cell checkbox element"
    },
    "cellEmpty": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the empty cell element"
    },
    "cellSkeleton": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the skeleton cell element"
    },
    "checkboxInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the selection checkbox element"
    },
    "columnHeader": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header element"
    },
    "columnHeader--alignCenter": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "<code>headerAlign=\"center\"</code>"
    },
    "columnHeader--alignLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "<code>headerAlign=\"left\"</code>"
    },
    "columnHeader--alignRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "<code>headerAlign=\"right\"</code>"
    },
    "columnHeader--dragging": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the floating column header element",
      "conditions": "it is dragged"
    },
    "columnHeader--emptyGroup": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the empty column group header cell"
    },
    "columnHeader--filledGroup": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column group header cell",
      "conditions": "not empty"
    },
    "columnHeader--filter": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the header filter cell"
    },
    "columnHeader--filtered": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "the column has a filter applied to it"
    },
    "columnHeader--last": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the last column header element"
    },
    "columnHeader--moving": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "it is being dragged"
    },
    "columnHeader--numeric": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "the type of the column is <code>number</code>"
    },
    "columnHeader--pinnedLeft": { "description": "" },
    "columnHeader--pinnedRight": { "description": "" },
    "columnHeader--sortable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "the column is sortable"
    },
    "columnHeader--sorted": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header",
      "conditions": "the column is sorted"
    },
    "columnHeader--withLeftBorder": { "description": "" },
    "columnHeader--withRightBorder": {
      "description": "Styles applied the column header if <code>showColumnVerticalBorder={true}</code>."
    },
    "columnHeaderCheckbox": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the header checkbox cell element"
    },
    "columnHeaderDraggableContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header&#39;s draggable container element"
    },
    "columnHeaderFilterInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the header filter input element"
    },
    "columnHeaderFilterOperatorLabel": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the header filter operator label element"
    },
    "columnHeaderTitle": {
      "description": "Styles applied to the column header&#39;s title element;"
    },
    "columnHeaderTitleContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header&#39;s title container element"
    },
    "columnHeaderTitleContainerContent": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header&#39;s title excepted buttons"
    },
    "columnSeparator": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header separator element"
    },
    "columnSeparator--resizable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header separator",
      "conditions": "the column is resizable"
    },
    "columnSeparator--resizing": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header separator",
      "conditions": "the column is being resized"
    },
    "columnSeparator--sideLeft": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header separator",
      "conditions": "the side is &quot;left&quot;"
    },
    "columnSeparator--sideRight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the column header separator",
      "conditions": "the side is &quot;right&quot;"
    },
    "columnsManagementFooter": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the columns management footer element"
    },
    "columnsManagementHeader": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the columns management header element"
    },
    "columnsManagementRow": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the columns management row element"
    },
    "columnsManagementSearchInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the columns management search input element"
    },
    "container--bottom": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the bottom container"
    },
    "container--top": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the top container"
    },
    "detailPanel": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the detail panel element"
    },
    "detailPanelToggleCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the detail panel toggle cell element"
    },
    "detailPanelToggleCell--expanded": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the detail panel toggle cell element",
      "conditions": "expanded"
    },
    "editBooleanCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "root of the boolean edit component"
    },
    "editInputCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root of the input component"
    },
    "filterForm": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root of the filter form component"
    },
    "filterFormColumnInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column input of the filter form component"
    },
    "filterFormDeleteIcon": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the delete icon of the filter form component"
    },
    "filterFormLogicOperatorInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the link operator input of the filter form component"
    },
    "filterFormOperatorInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the operator input of the filter form component"
    },
    "filterFormValueInput": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the value input of the filter form component"
    },
    "filterIcon": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the filter icon element"
    },
    "footerCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root element of the cell inside a footer row"
    },
    "footerContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the footer container element"
    },
    "groupingCriteriaCell": {
      "description": "Styles applied to the root element of the grouping criteria cell"
    },
    "groupingCriteriaCellToggle": {
      "description": "Styles applied to the toggle of the grouping criteria cell"
    },
    "headerFilterRow": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header filter row"
    },
    "iconButtonContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header icon&#39;s container"
    },
    "iconSeparator": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the column header separator icon element"
    },
    "main": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the main container element"
    },
    "main--hasPinnedRight": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the main container element",
      "conditions": "it has right pinned columns"
    },
    "menu": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the menu element" },
    "menuIcon": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the menu icon element"
    },
    "menuIconButton": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the menu icon button element"
    },
    "menuList": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the menu list element"
    },
    "menuOpen": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the menu icon element",
      "conditions": "the menu is open"
    },
    "overlay": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the overlay element"
    },
    "overlayWrapper": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the overlay wrapper element"
    },
    "overlayWrapperInner": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the overlay wrapper inner element"
    },
    "panelContent": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the panel content element"
    },
    "panelFooter": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the panel footer element"
    },
    "panelHeader": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the panel header element"
    },
    "panelWrapper": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the panel wrapper element"
    },
    "paper": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the paper element" },
    "pinnedColumns": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the pinned columns"
    },
    "pinnedRows": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the pinned rows container"
    },
    "pinnedRows--bottom": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the bottom pinned rows container"
    },
    "pinnedRows--top": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the top pinned rows container"
    },
    "pinnedRowsRenderZone": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "pinned rows render zones"
    },
    "root": { "description": "Styles applied to the root element." },
    "root--densityComfortable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "density is &quot;comfortable&quot;"
    },
    "root--densityCompact": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "density is &quot;compact&quot;"
    },
    "root--densityStandard": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "density is &quot;standard&quot; (default)"
    },
    "root--disableUserSelection": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "user selection is disabled"
    },
    "row--detailPanelExpanded": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the row",
      "conditions": "its detail panel is open"
    },
    "row--dragging": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the floating special row reorder cell element",
      "conditions": "it is dragged"
    },
    "row--dynamicHeight": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the row",
      "conditions": "it has dynamic row height"
    },
    "row--editable": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the row element",
      "conditions": "the row is editable"
    },
    "row--editing": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the row element",
      "conditions": "the row is in edit mode"
    },
    "row--firstVisible": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the first visible row element on every page of the grid"
    },
    "row--lastVisible": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the last visible row element on every page of the grid"
    },
    "rowCount": {
      "description": "Styles applied to {{nodeName}}. Only works when pagination is disabled.",
      "nodeName": "the footer row count element to show the total number of rows"
    },
    "rowReorderCell": {
      "description": "Styles applied to the root element of the row reorder cell"
    },
    "rowReorderCell--draggable": {
      "description": "Styles applied to the root element of the row reorder cell when dragging is allowed"
    },
    "rowReorderCellContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the row reorder cell container element"
    },
    "rowReorderCellPlaceholder": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the row&#39;s draggable placeholder element inside the special row reorder cell"
    },
    "rowSkeleton": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the skeleton row element"
    },
    "scrollArea": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "both scroll area elements"
    },
    "scrollArea--left": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the left scroll area element"
    },
    "scrollArea--right": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the right scroll area element"
    },
    "scrollbar": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the scrollbars" },
    "scrollbar--horizontal": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the horizontal scrollbar"
    },
    "scrollbar--vertical": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the horizontal scrollbar"
    },
    "selectedRowCount": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the footer selected row count element"
    },
    "sortIcon": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the sort icon element"
    },
    "toolbarContainer": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the toolbar container element"
    },
    "toolbarFilterList": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the toolbar filter list element"
    },
    "toolbarPromptControl": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the toolbar prompt control element"
    },
    "toolbarPromptControl--recording": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the toolbar prompt control element",
      "conditions": "recording"
    },
    "toolbarPromptControlRecordButton": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the toolbar prompt control record button element"
    },
    "toolbarPromptControlRecordingIndicator": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the toolbar prompt control recording indicator element"
    },
    "toolbarPromptControlSendButton": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the toolbar prompt control send button element"
    },
    "treeDataGroupingCell": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the root of the grouping column of the tree data"
    },
    "treeDataGroupingCellToggle": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the toggle of the grouping cell of the tree data"
    },
    "virtualScroller": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the virtualization container"
    },
    "virtualScrollerContent": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the virtualization content"
    },
    "virtualScrollerContent--overflowed": {
      "description": "Styles applied to {{nodeName}} when {{conditions}}.",
      "nodeName": "the virtualization content",
      "conditions": "its height is bigger than the virtualization container"
    },
    "virtualScrollerRenderZone": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the virtualization render zone"
    },
    "withBorderColor": {
      "description": "Styles applied to {{nodeName}}, {{conditions}}. Sets border color only.",
      "nodeName": "cells",
      "conditions": "column header and other elements that have border"
    },
    "withVerticalBorder": {
      "description": "Styles applied the grid if <code>showColumnVerticalBorder={true}</code>."
    }
  },
  "slotDescriptions": {
    "baseBadge": "The custom Badge component used in the grid for both header and cells.",
    "baseButton": "The custom Button component used in the grid.",
    "baseCheckbox": "The custom Checkbox component used in the grid for both header and cells.",
    "baseChip": "The custom Chip component used in the grid.",
    "baseCircularProgress": "The custom CircularProgress component used in the grid.",
    "baseDivider": "The custom Divider component used in the grid.",
    "baseFormControl": "The custom FormControl component used in the grid.",
    "baseIconButton": "The custom IconButton component used in the grid.",
    "baseInputAdornment": "The custom InputAdornment component used in the grid.",
    "baseInputLabel": "The custom InputLabel component used in the grid.",
    "baseLinearProgress": "The custom LinearProgress component used in the grid.",
    "baseMenuItem": "The custom MenuItem component used in the grid.",
    "baseMenuList": "The custom MenuList component used in the grid.",
    "basePopper": "The custom Popper component used in the grid.",
    "baseSelect": "The custom Select component used in the grid.",
    "baseSelectOption": "The custom SelectOption component used in the grid.",
    "baseSkeleton": "The custom Skeleton component used in the grid.",
    "baseTextField": "The custom TextField component used in the grid.",
    "baseTooltip": "The custom Tooltip component used in the grid.",
    "booleanCellFalseIcon": "Icon displayed on the boolean cell to represent the false value.",
    "booleanCellTrueIcon": "Icon displayed on the boolean cell to represent the true value.",
    "cell": "Component rendered for each cell.",
    "columnFilteredIcon": "Icon displayed on the column header menu to show that a filter has been applied to the column.",
    "columnHeaderFilterIconButton": "Filter icon component rendered in each column header.",
    "columnHeaders": "Component responsible for rendering the column headers.",
    "columnHeaderSortIcon": "Sort icon component rendered in each column header.",
    "columnMenu": "Column menu component rendered by clicking on the 3 dots &quot;kebab&quot; icon in column headers.",
    "columnMenuClearIcon": "Icon displayed in column menu for clearing values",
    "columnMenuFilterIcon": "Icon displayed in column menu for filter",
    "columnMenuHideIcon": "Icon displayed in column menu for hiding column",
    "columnMenuIcon": "Icon displayed on the side of the column header title to display the filter input component.",
    "columnMenuManageColumnsIcon": "Icon displayed in column menu for showing all columns",
    "columnMenuSortAscendingIcon": "Icon displayed in column menu for ascending sort",
    "columnMenuSortDescendingIcon": "Icon displayed in column menu for descending sort",
    "columnReorderIcon": "Icon displayed on the column reorder button.",
    "columnResizeIcon": "Icon displayed in between two column headers that allows to resize the column header.",
    "columnSelectorIcon": "Icon displayed on the column menu selector tab.",
    "columnsManagement": "Component used inside Grid Columns panel to manage columns.",
    "columnSortedAscendingIcon": "Icon displayed on the side of the column header title when sorted in ascending order.",
    "columnSortedDescendingIcon": "Icon displayed on the side of the column header title when sorted in descending order.",
    "columnsPanel": "GridColumns panel component rendered when clicking the columns button.",
    "columnUnsortedIcon": "Icon displayed on the side of the column header title when unsorted.",
    "densityComfortableIcon": "Icon displayed on the &quot;comfortable&quot; density option in the toolbar.",
    "densityCompactIcon": "Icon displayed on the compact density option in the toolbar.",
    "densityStandardIcon": "Icon displayed on the standard density option in the toolbar.",
    "detailPanelCollapseIcon": "Icon displayed on the detail panel toggle column when expanded.",
    "detailPanelExpandIcon": "Icon displayed on the detail panel toggle column when collapsed.",
    "detailPanels": "Component responsible for rendering the detail panels.",
    "exportIcon": "Icon displayed on the open export button present in the toolbar by default.",
    "filterPanel": "Filter panel component rendered when clicking the filter button.",
    "filterPanelAddIcon": "Icon displayed for deleting the filter from filter panel.",
    "filterPanelDeleteIcon": "Icon displayed for deleting the filter from filter panel.",
    "filterPanelRemoveAllIcon": "Icon displayed for deleting all the active filters from filter panel.",
    "footer": "Footer component rendered at the bottom of the grid viewport.",
    "footerRowCount": "Row count component rendered in the footer",
    "groupingCriteriaCollapseIcon": "Icon displayed on the grouping column when the children are expanded",
    "groupingCriteriaExpandIcon": "Icon displayed on the grouping column when the children are collapsed",
    "loadIcon": "Icon displayed on the input while processing.",
    "loadingOverlay": "Loading overlay component rendered when the grid is in a loading state.",
    "menuItemCheckIcon": "Icon displayed to indicate that a menu item is selected.",
    "moreActionsIcon": "Icon displayed on the <code>actions</code> column type to open the menu.",
    "noResultsOverlay": "No results overlay component rendered when the grid has no results after filtering.",
    "noRowsOverlay": "No rows overlay component rendered when the grid has no rows.",
    "openFilterButtonIcon": "Icon displayed on the open filter button present in the toolbar by default.",
    "pagination": "Pagination component rendered in the grid footer by default.",
    "panel": "Panel component wrapping the filters and columns panels.",
    "quickFilterClearIcon": "Icon displayed on the quick filter reset input.",
    "quickFilterIcon": "Icon displayed on the quick filter input.",
    "row": "Component rendered for each row.",
    "rowReorderIcon": "Icon displayed on the <code>reorder</code> column type to reorder a row.",
    "skeletonCell": "Component rendered for each skeleton cell.",
    "toolbar": "Toolbar component rendered inside the Header component.",
    "treeDataCollapseIcon": "Icon displayed on the tree data toggling column when the children are expanded",
    "treeDataExpandIcon": "Icon displayed on the tree data toggling column when the children are collapsed"
  }
}

{
  "componentDescription": "A button for performing actions from the toolbar.\nIt renders the `baseIconButton` slot.",
  "propDescriptions": {
    "action": {
      "description": "A ref for imperative actions. It currently only supports <code>focusVisible()</code> action."
    },
    "centerRipple": {
      "description": "If <code>true</code>, the ripples are centered. They won&#39;t start at the cursor interaction position."
    },
    "color": {
      "description": "The color of the component. It supports both default and custom theme colors, which can be added as shown in the <a href=\"https://mui.com/material-ui/customization/palette/#custom-colors\">palette customization guide</a>."
    },
    "disabled": { "description": "If <code>true</code>, the component is disabled." },
    "disableFocusRipple": {
      "description": "If <code>true</code>, the  keyboard focus ripple is disabled."
    },
    "disableRipple": {
      "description": "If <code>true</code>, the ripple effect is disabled.<br>⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the <code>.Mui-focusVisible</code> class."
    },
    "disableTouchRipple": {
      "description": "If <code>true</code>, the touch ripple effect is disabled."
    },
    "edge": {
      "description": "If given, uses a negative margin to counteract the padding on one side (this is often helpful for aligning the left or right side of the icon with content above or below, without ruining the border size and shape)."
    },
    "focusRipple": {
      "description": "If <code>true</code>, the base button will have a keyboard focus ripple."
    },
    "focusVisibleClassName": {
      "description": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It&#39;s a polyfill for the <a href=\"https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\">CSS :focus-visible selector</a>. The rationale for using this feature <a href=\"https://github.com/WICG/focus-visible/blob/HEAD/explainer.md\">is explained here</a>. A <a href=\"https://github.com/WICG/focus-visible\">polyfill can be used</a> to apply a <code>focus-visible</code> class to other components if needed."
    },
    "LinkComponent": {
      "description": "The component used to render a link when the <code>href</code> prop is provided."
    },
    "onFocusVisible": {
      "description": "Callback fired when the component is focused with a keyboard. We trigger a <code>onFocus</code> callback too."
    },
    "render": { "description": "A function to customize rendering of the component." },
    "size": {
      "description": "The size of the component. <code>small</code> is equivalent to the dense button styling."
    },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles."
    },
    "TouchRippleProps": { "description": "Props applied to the <code>TouchRipple</code> element." },
    "touchRippleRef": {
      "description": "A ref that points to the <code>TouchRipple</code> element."
    }
  },
  "classDescriptions": {
    "colorError": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"error\"</code>"
    },
    "colorInfo": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"info\"</code>"
    },
    "colorInherit": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"inherit\"</code>"
    },
    "colorPrimary": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"primary\"</code>"
    },
    "colorSecondary": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"secondary\"</code>"
    },
    "colorSuccess": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"success\"</code>"
    },
    "colorWarning": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>color=\"warning\"</code>"
    },
    "disabled": {
      "description": "State class applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>disabled={true}</code>"
    },
    "edgeEnd": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>edge=\"end\"</code>"
    },
    "edgeStart": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>edge=\"start\"</code>"
    },
    "root": { "description": "Styles applied to the root element." },
    "sizeLarge": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"large\"</code>"
    },
    "sizeMedium": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"medium\"</code>"
    },
    "sizeSmall": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"small\"</code>"
    }
  }
}

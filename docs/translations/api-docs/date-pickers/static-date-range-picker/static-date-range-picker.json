{
  "componentDescription": "",
  "propDescriptions": {
    "autoFocus": {
      "description": "If <code>true</code>, the main element is focused during the first mount. This main element is: - the element chosen by the visible view if any (i.e: the selected day on the <code>day</code> view). - the <code>input</code> element if there is a field rendered."
    },
    "calendars": { "description": "The number of calendars to render." },
    "currentMonthCalendarPosition": { "description": "Position the current month is rendered in." },
    "dayOfWeekFormatter": {
      "description": "Formats the day of week displayed in the calendar header.",
      "typeDescriptions": {
        "date": "The date of the day of week provided by the adapter.",
        "string": "The name to display."
      }
    },
    "defaultRangePosition": {
      "description": "The initial position in the edited date range. Used when the component is not controlled."
    },
    "defaultValue": {
      "description": "The default value. Used when the component is not controlled."
    },
    "disableAutoMonthSwitching": {
      "description": "If <code>true</code>, after selecting <code>start</code> date calendar will not automatically switch to the month of <code>end</code> date."
    },
    "disabled": {
      "description": "If <code>true</code>, the component is disabled. When disabled, the value cannot be changed and no interaction is possible."
    },
    "disableDragEditing": {
      "description": "If <code>true</code>, editing dates by dragging is disabled."
    },
    "disableFuture": {
      "description": "If <code>true</code>, disable values after the current date for date components, time for time components and both for date time components."
    },
    "disableHighlightToday": {
      "description": "If <code>true</code>, today&#39;s date is rendering without highlighting with circle."
    },
    "disablePast": {
      "description": "If <code>true</code>, disable values before the current date for date components, time for time components and both for date time components."
    },
    "displayStaticWrapperAs": {
      "description": "Force static wrapper inner components to be rendered in mobile or desktop mode."
    },
    "displayWeekNumber": {
      "description": "If <code>true</code>, the week number will be display in the calendar."
    },
    "fixedWeekNumber": {
      "description": "The day view will show as many weeks as needed after the end of the current month to match this value. Put it to 6 to have a fixed number of weeks in Gregorian calendars"
    },
    "loading": {
      "description": "If <code>true</code>, calls <code>renderLoading</code> instead of rendering the day calendar. Can be used to preload information and show it in calendar."
    },
    "localeText": {
      "description": "Locale for components texts. Allows overriding texts coming from <code>LocalizationProvider</code> and <code>theme</code>."
    },
    "maxDate": { "description": "Maximal selectable date." },
    "minDate": { "description": "Minimal selectable date." },
    "onAccept": {
      "description": "Callback fired when the value is accepted.",
      "typeDescriptions": {
        "value": "The value that was just accepted.",
        "context": "The context containing the validation result of the current value."
      }
    },
    "onChange": {
      "description": "Callback fired when the value changes.",
      "typeDescriptions": {
        "value": "The new value.",
        "context": "The context containing the validation result of the current value."
      }
    },
    "onClose": {
      "description": "Callback fired when component requests to be closed. Can be fired when selecting (by default on <code>desktop</code> mode) or clearing a value."
    },
    "onError": {
      "description": "Callback fired when the error associated with the current value changes. When a validation error is detected, the <code>error</code> parameter contains a non-null value. This can be used to render an appropriate form error.",
      "typeDescriptions": {
        "error": "The reason why the current value is not valid.",
        "value": "The value associated with the error."
      }
    },
    "onMonthChange": {
      "description": "Callback fired on month change.",
      "typeDescriptions": { "month": "The new month." }
    },
    "onRangePositionChange": {
      "description": "Callback fired when the range position changes.",
      "typeDescriptions": { "rangePosition": "The new range position." }
    },
    "rangePosition": {
      "description": "The position in the currently edited date range. Used when the component position is controlled."
    },
    "readOnly": {
      "description": "If <code>true</code>, the component is read-only. When read-only, the value cannot be changed but the user can interact with the interface."
    },
    "reduceAnimations": { "description": "If <code>true</code>, disable heavy animations." },
    "referenceDate": {
      "description": "The date used to generate the new value when both <code>value</code> and <code>defaultValue</code> are empty."
    },
    "renderLoading": {
      "description": "Component rendered on the &quot;day&quot; view when <code>props.loading</code> is true.",
      "typeDescriptions": { "React.ReactNode": "The node to render when loading." }
    },
    "shouldDisableDate": {
      "description": "Disable specific date.<br>Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.",
      "typeDescriptions": {
        "day": "The date to test.",
        "position": "The date to test, &#39;start&#39; or &#39;end&#39;.",
        "boolean": "Returns <code>true</code> if the date should be disabled."
      }
    },
    "showDaysOutsideCurrentMonth": {
      "description": "If <code>true</code>, days outside the current month are rendered:<br>- if <code>fixedWeekNumber</code> is defined, renders days to have the weeks requested.<br>- if <code>fixedWeekNumber</code> is not defined, renders day to fill the first and last week of the current month.<br>- ignored if <code>calendars</code> equals more than <code>1</code> on range pickers."
    },
    "slotProps": { "description": "The props used for each component slot." },
    "slots": { "description": "Overridable component slots." },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles."
    },
    "timezone": {
      "description": "Choose which timezone to use for the value. Example: &quot;default&quot;, &quot;system&quot;, &quot;UTC&quot;, &quot;America/New_York&quot;. If you pass values from other timezones to some props, they will be converted to this timezone before being used.",
      "seeMoreText": "See the {{link}} for more details."
    },
    "value": { "description": "The selected value. Used when the component is controlled." },
    "viewRenderers": {
      "description": "Define custom view renderers for each section. If <code>null</code>, the section will only have field editing. If <code>undefined</code>, internally defined view will be used."
    }
  },
  "classDescriptions": {},
  "slotDescriptions": {
    "actionBar": "Custom component for the action bar, it is placed below the picker views.",
    "calendarHeader": "Custom component for calendar header. Check the <a href=\"https://mui.com/x/api/date-pickers/pickers-calendar-header/\">PickersCalendarHeader</a> component.",
    "day": "Custom component for day in range pickers. Check the <a href=\"https://mui.com/x/api/date-pickers/date-range-picker-day/\">DateRangePickersDay</a> component.",
    "layout": "Custom component for wrapping the layout. It wraps the toolbar, views, action bar, and shortcuts.",
    "leftArrowIcon": "Icon displayed in the left view switch button.",
    "nextIconButton": "Button allowing to switch to the right view.",
    "previousIconButton": "Button allowing to switch to the left view.",
    "rightArrowIcon": "Icon displayed in the right view switch button.",
    "shortcuts": "Custom component for the shortcuts.",
    "switchViewButton": "Button displayed to switch between different calendar views.",
    "switchViewIcon": "Icon displayed in the SwitchViewButton. Rotated by 180Â° when the open view is <code>year</code>.",
    "toolbar": "Custom component for the toolbar rendered above the views."
  }
}

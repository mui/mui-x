{
  "componentDescription": "",
  "propDescriptions": {
    "ampm": { "description": "12h/24h view for hour selection clock." },
    "autoFocus": {
      "description": "If <code>true</code>, the main element is focused during the first mount. This main element is: - the element chosen by the visible view if any (i.e: the selected day on the <code>day</code> view). - the <code>input</code> element if there is a field rendered."
    },
    "closeOnSelect": {
      "description": "If <code>true</code>, the Picker will close after submitting the full date."
    },
    "currentMonthCalendarPosition": { "description": "Position the current month is rendered in." },
    "dayOfWeekFormatter": {
      "description": "Formats the day of week displayed in the calendar header.",
      "typeDescriptions": {
        "date": {
          "name": "date",
          "description": "The date of the day of week provided by the adapter."
        },
        "string": { "name": "string", "description": "The name to display." }
      }
    },
    "defaultRangePosition": {
      "description": "The initial position in the edited date range. Used when the component is not controlled."
    },
    "defaultValue": {
      "description": "The default value. Used when the component is not controlled."
    },
    "disableAutoMonthSwitching": {
      "description": "If <code>true</code>, after selecting <code>start</code> date calendar will not automatically switch to the month of <code>end</code> date."
    },
    "disabled": {
      "description": "If <code>true</code>, the component is disabled. When disabled, the value cannot be changed and no interaction is possible."
    },
    "disableDragEditing": {
      "description": "If <code>true</code>, editing dates by dragging is disabled."
    },
    "disableFuture": {
      "description": "If <code>true</code>, disable values after the current date for date components, time for time components and both for date time components."
    },
    "disableHighlightToday": {
      "description": "If <code>true</code>, today&#39;s date is rendering without highlighting with circle."
    },
    "disableIgnoringDatePartForTimeValidation": {
      "description": "Do not ignore date part when validating min/max time."
    },
    "disableOpenPicker": {
      "description": "If <code>true</code>, the button to open the Picker will not be rendered (it will only render the field)."
    },
    "disablePast": {
      "description": "If <code>true</code>, disable values before the current date for date components, time for time components and both for date time components."
    },
    "displayWeekNumber": {
      "description": "If <code>true</code>, the week number will be display in the calendar."
    },
    "fixedWeekNumber": {
      "description": "The day view will show as many weeks as needed after the end of the current month to match this value. Put it to 6 to have a fixed number of weeks in Gregorian calendars"
    },
    "format": {
      "description": "Format of the date when rendered in the input(s). Defaults to localized format based on the used <code>views</code>."
    },
    "formatDensity": {
      "description": "Density of the format when rendered in the input. Setting <code>formatDensity</code> to <code>&quot;spacious&quot;</code> will add a space before and after each <code>/</code>, <code>-</code> and <code>.</code> character."
    },
    "inputRef": { "description": "Pass a ref to the <code>input</code> element." },
    "label": { "description": "The label content." },
    "loading": {
      "description": "If <code>true</code>, calls <code>renderLoading</code> instead of rendering the day calendar. Can be used to preload information and show it in calendar."
    },
    "localeText": {
      "description": "Locale for components texts. Allows overriding texts coming from <code>LocalizationProvider</code> and <code>theme</code>."
    },
    "maxDate": { "description": "Maximal selectable date." },
    "maxDateTime": {
      "description": "Maximal selectable moment of time with binding to date, to set max time in each day use <code>maxTime</code>."
    },
    "maxTime": {
      "description": "Maximal selectable time. The date part of the object will be ignored unless <code>props.disableIgnoringDatePartForTimeValidation === true</code>."
    },
    "minDate": { "description": "Minimal selectable date." },
    "minDateTime": {
      "description": "Minimal selectable moment of time with binding to date, to set min time in each day use <code>minTime</code>."
    },
    "minTime": {
      "description": "Minimal selectable time. The date part of the object will be ignored unless <code>props.disableIgnoringDatePartForTimeValidation === true</code>."
    },
    "minutesStep": { "description": "Step over minutes." },
    "name": {
      "description": "Name attribute used by the <code>input</code> element in the Field."
    },
    "onAccept": {
      "description": "Callback fired when the value is accepted.",
      "typeDescriptions": {
        "value": {
          "name": "value",
          "description": "The value that was just accepted.",
          "argType": "TValue",
          "argTypeDescription": "The value type. It will be the same type as <code>value</code> or <code>null</code>. It can be in <code>[start, end]</code> format in case of range value."
        },
        "context": {
          "name": "context",
          "description": "The context containing the validation result of the current value."
        }
      }
    },
    "onChange": {
      "description": "Callback fired when the value changes.",
      "typeDescriptions": {
        "value": {
          "name": "value",
          "description": "The new value.",
          "argType": "TValue",
          "argTypeDescription": "The value type. It will be the same type as <code>value</code> or <code>null</code>. It can be in <code>[start, end]</code> format in case of range value."
        },
        "context": {
          "name": "context",
          "description": "The context containing the validation result of the current value."
        }
      }
    },
    "onClose": {
      "description": "Callback fired when the popup requests to be closed. Use in controlled mode (see <code>open</code>)."
    },
    "onError": {
      "description": "Callback fired when the error associated with the current value changes. When a validation error is detected, the <code>error</code> parameter contains a non-null value. This can be used to render an appropriate form error.",
      "typeDescriptions": {
        "error": {
          "name": "error",
          "description": "The reason why the current value is not valid.",
          "argType": "TError",
          "argTypeDescription": "The validation error type. It will be either <code>string</code> or a <code>null</code>. It can be in <code>[start, end]</code> format in case of range value."
        },
        "value": {
          "name": "value",
          "description": "The value associated with the error.",
          "argType": "TValue",
          "argTypeDescription": "The value type. It will be the same type as <code>value</code> or <code>null</code>. It can be in <code>[start, end]</code> format in case of range value."
        }
      }
    },
    "onMonthChange": {
      "description": "Callback fired on month change.",
      "typeDescriptions": { "month": { "name": "month", "description": "The new month." } }
    },
    "onOpen": {
      "description": "Callback fired when the popup requests to be opened. Use in controlled mode (see <code>open</code>)."
    },
    "onRangePositionChange": {
      "description": "Callback fired when the range position changes.",
      "typeDescriptions": {
        "rangePosition": { "name": "rangePosition", "description": "The new range position." }
      }
    },
    "onSelectedSectionsChange": {
      "description": "Callback fired when the selected sections change.",
      "typeDescriptions": {
        "newValue": { "name": "newValue", "description": "The new selected sections." }
      }
    },
    "onViewChange": {
      "description": "Callback fired on view change.",
      "typeDescriptions": {
        "view": {
          "name": "view",
          "description": "The new view.",
          "argType": "TView",
          "argTypeDescription": "Type of the view. It will vary based on the Picker type and the <code>views</code> it uses."
        }
      }
    },
    "open": { "description": "Control the popup or dialog open state." },
    "openTo": {
      "description": "The default visible view. Used when the component view is not controlled. Must be a valid option from <code>views</code> list."
    },
    "rangePosition": {
      "description": "The position in the currently edited date range. Used when the component position is controlled."
    },
    "readOnly": {
      "description": "If <code>true</code>, the component is read-only. When read-only, the value cannot be changed but the user can interact with the interface."
    },
    "reduceAnimations": { "description": "If <code>true</code>, disable heavy animations." },
    "referenceDate": {
      "description": "The date used to generate the new value when both <code>value</code> and <code>defaultValue</code> are empty."
    },
    "renderLoading": {
      "description": "Component rendered on the &quot;day&quot; view when <code>props.loading</code> is true.",
      "typeDescriptions": {
        "React.ReactNode": {
          "name": "React.ReactNode",
          "description": "The node to render when loading."
        }
      }
    },
    "selectedSections": {
      "description": "The currently selected sections. This prop accepts four formats: 1. If a number is provided, the section at this index will be selected. 2. If a string of type <code>FieldSectionType</code> is provided, the first section with that name will be selected. 3. If <code>&quot;all&quot;</code> is provided, all the sections will be selected. 4. If <code>null</code> is provided, no section will be selected. If not provided, the selected sections will be handled internally."
    },
    "shouldDisableDate": {
      "description": "Disable specific date.<br>Warning: This function can be called multiple times (for example when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.",
      "typeDescriptions": {
        "day": { "name": "day", "description": "The date to test." },
        "position": {
          "name": "position",
          "description": "The date to test, &#39;start&#39; or &#39;end&#39;."
        },
        "boolean": {
          "name": "boolean",
          "description": "Returns <code>true</code> if the date should be disabled."
        }
      }
    },
    "shouldDisableTime": {
      "description": "Disable specific time.",
      "typeDescriptions": {
        "value": { "name": "value", "description": "The value to check." },
        "view": { "name": "view", "description": "The clock type of the timeValue." },
        "boolean": {
          "name": "boolean",
          "description": "If <code>true</code> the time will be disabled."
        }
      }
    },
    "showDaysOutsideCurrentMonth": {
      "description": "If <code>true</code>, days outside the current month are rendered:<br>- if <code>fixedWeekNumber</code> is defined, renders days to have the weeks requested.<br>- if <code>fixedWeekNumber</code> is not defined, renders day to fill the first and last week of the current month.<br>- ignored if <code>calendars</code> equals more than <code>1</code> on range pickers."
    },
    "skipDisabled": {
      "description": "If <code>true</code>, disabled digital clock items will not be rendered."
    },
    "slotProps": { "description": "The props used for each component slot." },
    "slots": { "description": "Overridable component slots." },
    "sx": {
      "description": "The system prop that allows defining system overrides as well as additional CSS styles."
    },
    "thresholdToRenderTimeInASingleColumn": {
      "description": "Amount of time options below or at which the single column time renderer is used."
    },
    "timeSteps": {
      "description": "The time steps between two time unit options. For example, if <code>timeSteps.minutes = 8</code>, then the available minute options will be <code>[0, 8, 16, 24, 32, 40, 48, 56]</code>. When single column time renderer is used, only <code>timeSteps.minutes</code> will be used."
    },
    "timezone": {
      "description": "Choose which timezone to use for the value. Example: &quot;default&quot;, &quot;system&quot;, &quot;UTC&quot;, &quot;America/New_York&quot;. If you pass values from other timezones to some props, they will be converted to this timezone before being used.",
      "seeMoreText": "See the {{link}} for more details."
    },
    "value": { "description": "The selected value. Used when the component is controlled." },
    "view": {
      "description": "The visible view. Used when the component view is controlled. Must be a valid option from <code>views</code> list."
    },
    "viewRenderers": {
      "description": "Define custom view renderers for each section. If <code>null</code>, the section will only have field editing. If <code>undefined</code>, internally defined view will be used."
    },
    "views": { "description": "Available views." }
  },
  "classDescriptions": {},
  "slotDescriptions": {
    "actionBar": "Custom component for the action bar, it is placed below the Picker views.",
    "calendarHeader": "Custom component for calendar header. Check the <a href=\"https://mui.com/x/api/date-pickers/pickers-calendar-header/\">PickersCalendarHeader</a> component.",
    "clearButton": "Button to clear the value.",
    "clearIcon": "Icon to display in the button used to clean the value.",
    "day": "Custom component for day in range pickers. Check the <a href=\"https://mui.com/x/api/date-pickers/date-range-picker-day/\">DateRangePickersDay</a> component.",
    "dialog": "Custom component for the dialog inside which the views are rendered on mobile.",
    "digitalClockItem": "Component responsible for rendering a single digital clock item.",
    "digitalClockSectionItem": "Component responsible for rendering a single multi section digital clock section item.",
    "field": "Component used to enter the date with the keyboard.",
    "inputAdornment": "Component displayed on the start or end input adornment used to open the Picker.",
    "layout": "Custom component for wrapping the layout. It wraps the toolbar, views, action bar, and shortcuts.",
    "leftArrowIcon": "Icon displayed in the left view switch button.",
    "mobilePaper": "Custom component for the paper rendered inside the mobile picker&#39;s Dialog.",
    "mobileTransition": "Custom component for the mobile dialog <a href=\"https://mui.com/material-ui/transitions/\">Transition</a>.",
    "nextIconButton": "Button allowing to switch to the right view.",
    "openPickerButton": "Button to open the Picker.",
    "openPickerIcon": "Icon to display in the button used to open the Picker.",
    "previousIconButton": "Button allowing to switch to the left view.",
    "rightArrowIcon": "Icon displayed in the right view switch button.",
    "shortcuts": "Custom component for the shortcuts.",
    "switchViewButton": "Button displayed to switch between different calendar views.",
    "switchViewIcon": "Icon displayed in the SwitchViewButton. Rotated by 180° when the open view is <code>year</code>.",
    "tabs": "Tabs enabling toggling between date and time pickers.",
    "textField": "Form control with an input to render the value.",
    "toolbar": "Custom component for the toolbar rendered above the views."
  }
}

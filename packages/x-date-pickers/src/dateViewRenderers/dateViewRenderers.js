"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderDateViewCalendar = void 0;
var React = require("react");
var DateCalendar_1 = require("../DateCalendar");
var date_utils_1 = require("../internals/utils/date-utils");
var renderDateViewCalendar = function (_a) {
    var view = _a.view, onViewChange = _a.onViewChange, views = _a.views, focusedView = _a.focusedView, onFocusedViewChange = _a.onFocusedViewChange, value = _a.value, defaultValue = _a.defaultValue, referenceDate = _a.referenceDate, onChange = _a.onChange, className = _a.className, classes = _a.classes, disableFuture = _a.disableFuture, disablePast = _a.disablePast, minDate = _a.minDate, maxDate = _a.maxDate, shouldDisableDate = _a.shouldDisableDate, shouldDisableMonth = _a.shouldDisableMonth, shouldDisableYear = _a.shouldDisableYear, reduceAnimations = _a.reduceAnimations, onMonthChange = _a.onMonthChange, monthsPerRow = _a.monthsPerRow, onYearChange = _a.onYearChange, yearsOrder = _a.yearsOrder, yearsPerRow = _a.yearsPerRow, slots = _a.slots, slotProps = _a.slotProps, loading = _a.loading, renderLoading = _a.renderLoading, disableHighlightToday = _a.disableHighlightToday, readOnly = _a.readOnly, disabled = _a.disabled, showDaysOutsideCurrentMonth = _a.showDaysOutsideCurrentMonth, dayOfWeekFormatter = _a.dayOfWeekFormatter, sx = _a.sx, autoFocus = _a.autoFocus, fixedWeekNumber = _a.fixedWeekNumber, displayWeekNumber = _a.displayWeekNumber, timezone = _a.timezone;
    return (<DateCalendar_1.DateCalendar view={view} onViewChange={onViewChange} views={views.filter(date_utils_1.isDatePickerView)} focusedView={focusedView && (0, date_utils_1.isDatePickerView)(focusedView) ? focusedView : null} onFocusedViewChange={onFocusedViewChange} value={value} defaultValue={defaultValue} referenceDate={referenceDate} onChange={onChange} className={className} classes={classes} disableFuture={disableFuture} disablePast={disablePast} minDate={minDate} maxDate={maxDate} shouldDisableDate={shouldDisableDate} shouldDisableMonth={shouldDisableMonth} shouldDisableYear={shouldDisableYear} reduceAnimations={reduceAnimations} onMonthChange={onMonthChange} monthsPerRow={monthsPerRow} onYearChange={onYearChange} yearsOrder={yearsOrder} yearsPerRow={yearsPerRow} slots={slots} slotProps={slotProps} loading={loading} renderLoading={renderLoading} disableHighlightToday={disableHighlightToday} readOnly={readOnly} disabled={disabled} showDaysOutsideCurrentMonth={showDaysOutsideCurrentMonth} dayOfWeekFormatter={dayOfWeekFormatter} sx={sx} autoFocus={autoFocus} fixedWeekNumber={fixedWeekNumber} displayWeekNumber={displayWeekNumber} timezone={timezone}/>);
};
exports.renderDateViewCalendar = renderDateViewCalendar;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderMultiSectionDigitalClockTimeView = exports.renderDigitalClockTimeView = exports.renderTimeViewClock = void 0;
var React = require("react");
var TimeClock_1 = require("../TimeClock");
var DigitalClock_1 = require("../DigitalClock");
var MultiSectionDigitalClock_1 = require("../MultiSectionDigitalClock");
var time_utils_1 = require("../internals/utils/time-utils");
var renderTimeViewClock = function (_a) {
    var view = _a.view, onViewChange = _a.onViewChange, focusedView = _a.focusedView, onFocusedViewChange = _a.onFocusedViewChange, views = _a.views, value = _a.value, defaultValue = _a.defaultValue, referenceDate = _a.referenceDate, onChange = _a.onChange, className = _a.className, classes = _a.classes, disableFuture = _a.disableFuture, disablePast = _a.disablePast, minTime = _a.minTime, maxTime = _a.maxTime, shouldDisableTime = _a.shouldDisableTime, minutesStep = _a.minutesStep, ampm = _a.ampm, ampmInClock = _a.ampmInClock, slots = _a.slots, slotProps = _a.slotProps, readOnly = _a.readOnly, disabled = _a.disabled, sx = _a.sx, autoFocus = _a.autoFocus, showViewSwitcher = _a.showViewSwitcher, disableIgnoringDatePartForTimeValidation = _a.disableIgnoringDatePartForTimeValidation, timezone = _a.timezone;
    return (<TimeClock_1.TimeClock view={view} onViewChange={onViewChange} focusedView={focusedView && (0, time_utils_1.isTimeView)(focusedView) ? focusedView : null} onFocusedViewChange={onFocusedViewChange} views={views.filter(time_utils_1.isTimeView)} value={value} defaultValue={defaultValue} referenceDate={referenceDate} onChange={onChange} className={className} classes={classes} disableFuture={disableFuture} disablePast={disablePast} minTime={minTime} maxTime={maxTime} shouldDisableTime={shouldDisableTime} minutesStep={minutesStep} ampm={ampm} ampmInClock={ampmInClock} slots={slots} slotProps={slotProps} readOnly={readOnly} disabled={disabled} sx={sx} autoFocus={autoFocus} showViewSwitcher={showViewSwitcher} disableIgnoringDatePartForTimeValidation={disableIgnoringDatePartForTimeValidation} timezone={timezone}/>);
};
exports.renderTimeViewClock = renderTimeViewClock;
var renderDigitalClockTimeView = function (_a) {
    var view = _a.view, onViewChange = _a.onViewChange, focusedView = _a.focusedView, onFocusedViewChange = _a.onFocusedViewChange, views = _a.views, value = _a.value, defaultValue = _a.defaultValue, referenceDate = _a.referenceDate, onChange = _a.onChange, className = _a.className, classes = _a.classes, disableFuture = _a.disableFuture, disablePast = _a.disablePast, minTime = _a.minTime, maxTime = _a.maxTime, shouldDisableTime = _a.shouldDisableTime, minutesStep = _a.minutesStep, ampm = _a.ampm, slots = _a.slots, slotProps = _a.slotProps, readOnly = _a.readOnly, disabled = _a.disabled, sx = _a.sx, autoFocus = _a.autoFocus, disableIgnoringDatePartForTimeValidation = _a.disableIgnoringDatePartForTimeValidation, timeSteps = _a.timeSteps, skipDisabled = _a.skipDisabled, timezone = _a.timezone;
    return (<DigitalClock_1.DigitalClock view={view} onViewChange={onViewChange} focusedView={focusedView && (0, time_utils_1.isTimeView)(focusedView) ? focusedView : null} onFocusedViewChange={onFocusedViewChange} views={views.filter(time_utils_1.isTimeView)} value={value} defaultValue={defaultValue} referenceDate={referenceDate} onChange={onChange} className={className} classes={classes} disableFuture={disableFuture} disablePast={disablePast} minTime={minTime} maxTime={maxTime} shouldDisableTime={shouldDisableTime} minutesStep={minutesStep} ampm={ampm} slots={slots} slotProps={slotProps} readOnly={readOnly} disabled={disabled} sx={sx} autoFocus={autoFocus} disableIgnoringDatePartForTimeValidation={disableIgnoringDatePartForTimeValidation} timeStep={timeSteps === null || timeSteps === void 0 ? void 0 : timeSteps.minutes} skipDisabled={skipDisabled} timezone={timezone}/>);
};
exports.renderDigitalClockTimeView = renderDigitalClockTimeView;
var renderMultiSectionDigitalClockTimeView = function (_a) {
    var view = _a.view, onViewChange = _a.onViewChange, focusedView = _a.focusedView, onFocusedViewChange = _a.onFocusedViewChange, views = _a.views, value = _a.value, defaultValue = _a.defaultValue, referenceDate = _a.referenceDate, onChange = _a.onChange, className = _a.className, classes = _a.classes, disableFuture = _a.disableFuture, disablePast = _a.disablePast, minTime = _a.minTime, maxTime = _a.maxTime, shouldDisableTime = _a.shouldDisableTime, minutesStep = _a.minutesStep, ampm = _a.ampm, slots = _a.slots, slotProps = _a.slotProps, readOnly = _a.readOnly, disabled = _a.disabled, sx = _a.sx, autoFocus = _a.autoFocus, disableIgnoringDatePartForTimeValidation = _a.disableIgnoringDatePartForTimeValidation, timeSteps = _a.timeSteps, skipDisabled = _a.skipDisabled, timezone = _a.timezone;
    return (<MultiSectionDigitalClock_1.MultiSectionDigitalClock view={view} onViewChange={onViewChange} focusedView={focusedView && (0, time_utils_1.isInternalTimeView)(focusedView) ? focusedView : null} onFocusedViewChange={onFocusedViewChange} views={views.filter(time_utils_1.isTimeView)} value={value} defaultValue={defaultValue} referenceDate={referenceDate} onChange={onChange} className={className} classes={classes} disableFuture={disableFuture} disablePast={disablePast} minTime={minTime} maxTime={maxTime} shouldDisableTime={shouldDisableTime} minutesStep={minutesStep} ampm={ampm} slots={slots} slotProps={slotProps} readOnly={readOnly} disabled={disabled} sx={sx} autoFocus={autoFocus} disableIgnoringDatePartForTimeValidation={disableIgnoringDatePartForTimeValidation} timeSteps={timeSteps} skipDisabled={skipDisabled} timezone={timezone}/>);
};
exports.renderMultiSectionDigitalClockTimeView = renderMultiSectionDigitalClockTimeView;

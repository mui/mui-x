import * as React from 'react';
import type { RefObject } from '@mui/x-internals/types';
import type { DataGridProps } from '../../models/props/DataGridProps';
import type { GridPrivateApiCommon } from '../../models/api/gridApiCommon';
import type { GridStateInitializer } from '../utils/useGridInitializeState';
import type { GridStateCommunity } from '../../models/gridStateCommunity';
import type { GridRowModel } from '../../models/gridRows';
import { createSelector } from '../../utils/createSelector';
import { GRID_ID_AUTOGENERATED } from '../features/rows/gridRowsUtils';

type Props = Pick<DataGridProps, 'getRowId'>;

const gridPropsStateSelector = (state: GridStateCommunity) => state.props;

export const gridRowIdSelector = createSelector(
  gridPropsStateSelector,
  (props, row: GridRowModel) => {
    if (GRID_ID_AUTOGENERATED in row) {
      return row[GRID_ID_AUTOGENERATED];
    }
    return props.getRowId ? props.getRowId(row) : row.id;
  },
);

export const propsStateInitializer: GridStateInitializer<Props> = (state, props) => {
  return {
    ...state,
    props: {
      getRowId: props.getRowId,
    },
  };
};

export const useGridProps = <PrivateApi extends GridPrivateApiCommon>(
  apiRef: RefObject<PrivateApi>,
  props: Props,
) => {
  React.useEffect(() => {
    apiRef.current.setState((state) => ({
      ...state,
      props: {
        getRowId: props.getRowId,
      },
    }));
  }, [apiRef, props.getRowId]);
};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gridSortedRowIndexLookupSelector = exports.gridSortColumnLookupSelector = exports.gridSortModelSelector = exports.gridSortedRowEntriesSelector = exports.gridSortedRowIdsSelector = void 0;
var createSelector_1 = require("../../../utils/createSelector");
var gridRowsSelector_1 = require("../rows/gridRowsSelector");
var gridRowsUtils_1 = require("../rows/gridRowsUtils");
/**
 * @category Sorting
 * @ignore - do not document.
 */
var gridSortingStateSelector = (0, createSelector_1.createRootSelector)(function (state) { return state.sorting; });
/**
 * Get the id of the rows after the sorting process.
 * @category Sorting
 */
exports.gridSortedRowIdsSelector = (0, createSelector_1.createSelector)(gridSortingStateSelector, function (sortingState) { return sortingState.sortedRows; });
/**
 * Get the id and the model of the rows after the sorting process.
 * @category Sorting
 */
exports.gridSortedRowEntriesSelector = (0, createSelector_1.createSelectorMemoized)(exports.gridSortedRowIdsSelector, gridRowsSelector_1.gridRowsLookupSelector, gridRowsSelector_1.gridRowTreeSelector, function (sortedIds, idRowsLookup, rowTree) {
    return sortedIds.reduce(function (acc, id) {
        var _a;
        var model = idRowsLookup[id];
        if (model) {
            acc.push({ id: id, model: model });
        }
        else {
            var rowNode = rowTree[id];
            if (rowNode && (0, gridRowsUtils_1.isAutogeneratedRowNode)(rowNode)) {
                acc.push({ id: id, model: (_a = {}, _a[gridRowsUtils_1.GRID_ID_AUTOGENERATED] = id, _a) });
            }
        }
        return acc;
    }, []);
});
/**
 * Get the current sorting model.
 * @category Sorting
 */
exports.gridSortModelSelector = (0, createSelector_1.createSelector)(gridSortingStateSelector, function (sorting) { return sorting.sortModel; });
/**
 * @category Sorting
 * @ignore - do not document.
 */
exports.gridSortColumnLookupSelector = (0, createSelector_1.createSelectorMemoized)(exports.gridSortModelSelector, function (sortModel) {
    var result = sortModel.reduce(function (res, sortItem, index) {
        res[sortItem.field] = {
            sortDirection: sortItem.sort,
            sortIndex: sortModel.length > 1 ? index + 1 : undefined,
        };
        return res;
    }, {});
    return result;
});
/**
 * @category Sorting
 * @ignore - do not document.
 */
exports.gridSortedRowIndexLookupSelector = (0, createSelector_1.createSelectorMemoized)(exports.gridSortedRowIdsSelector, function (sortedIds) {
    return sortedIds.reduce(function (acc, id, index) {
        acc[id] = index;
        return acc;
    }, Object.create(null));
});

"use strict";
'use client';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGridEditing = exports.editingStateInitializer = void 0;
var React = require("react");
var useGridApiMethod_1 = require("../../utils/useGridApiMethod");
var useGridCellEditing_1 = require("./useGridCellEditing");
var gridEditRowModel_1 = require("../../../models/gridEditRowModel");
var useGridRowEditing_1 = require("./useGridRowEditing");
var gridEditingSelectors_1 = require("./gridEditingSelectors");
var gridRowsUtils_1 = require("../rows/gridRowsUtils");
var editingStateInitializer = function (state) { return (__assign(__assign({}, state), { editRows: {} })); };
exports.editingStateInitializer = editingStateInitializer;
var useGridEditing = function (apiRef, props) {
    (0, useGridCellEditing_1.useGridCellEditing)(apiRef, props);
    (0, useGridRowEditing_1.useGridRowEditing)(apiRef, props);
    var debounceMap = React.useRef({});
    var isCellEditableProp = props.isCellEditable;
    var isCellEditable = React.useCallback(function (params) {
        if ((0, gridRowsUtils_1.isAutogeneratedRowNode)(params.rowNode)) {
            return false;
        }
        if (!params.colDef.editable) {
            return false;
        }
        if (!params.colDef.renderEditCell) {
            return false;
        }
        if (isCellEditableProp) {
            return isCellEditableProp(params);
        }
        return true;
    }, [isCellEditableProp]);
    var maybeDebounce = function (id, field, debounceMs, callback) {
        if (!debounceMs) {
            callback();
            return;
        }
        if (!debounceMap.current[id]) {
            debounceMap.current[id] = {};
        }
        if (debounceMap.current[id][field]) {
            var timeout_1 = debounceMap.current[id][field][0];
            clearTimeout(timeout_1);
        }
        // To run the callback immediately without waiting the timeout
        var runImmediately = function () {
            var timeout = debounceMap.current[id][field][0];
            clearTimeout(timeout);
            callback();
            delete debounceMap.current[id][field];
        };
        var timeout = setTimeout(function () {
            callback();
            delete debounceMap.current[id][field];
        }, debounceMs);
        debounceMap.current[id][field] = [timeout, runImmediately];
    };
    React.useEffect(function () {
        var debounces = debounceMap.current;
        return function () {
            Object.entries(debounces).forEach(function (_a) {
                var id = _a[0], fields = _a[1];
                Object.keys(fields).forEach(function (field) {
                    var timeout = debounces[id][field][0];
                    clearTimeout(timeout);
                    delete debounces[id][field];
                });
            });
        };
    }, []);
    var runPendingEditCellValueMutation = React.useCallback(function (id, field) {
        if (!debounceMap.current[id]) {
            return;
        }
        if (!field) {
            Object.keys(debounceMap.current[id]).forEach(function (debouncedField) {
                var _a = debounceMap.current[id][debouncedField], runCallback = _a[1];
                runCallback();
            });
        }
        else if (debounceMap.current[id][field]) {
            var _a = debounceMap.current[id][field], runCallback = _a[1];
            runCallback();
        }
    }, []);
    var setEditCellValue = React.useCallback(function (params) {
        var id = params.id, field = params.field, debounceMs = params.debounceMs;
        return new Promise(function (resolve) {
            maybeDebounce(id, field, debounceMs, function () { return __awaiter(void 0, void 0, void 0, function () {
                var setEditCellValueToCall, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            setEditCellValueToCall = props.editMode === gridEditRowModel_1.GridEditModes.Row
                                ? apiRef.current.setRowEditingEditCellValue
                                : apiRef.current.setCellEditingEditCellValue;
                            if (!(apiRef.current.getCellMode(id, field) === gridEditRowModel_1.GridCellModes.Edit)) return [3 /*break*/, 2];
                            return [4 /*yield*/, setEditCellValueToCall(params)];
                        case 1:
                            result = _a.sent();
                            resolve(result);
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            }); });
        });
    }, [apiRef, props.editMode]);
    var getRowWithUpdatedValues = React.useCallback(function (id, field) {
        return props.editMode === gridEditRowModel_1.GridEditModes.Cell
            ? apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field)
            : apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);
    }, [apiRef, props.editMode]);
    var getEditCellMeta = React.useCallback(function (id, field) {
        var _a, _b;
        var editingState = (0, gridEditingSelectors_1.gridEditRowsStateSelector)(apiRef);
        return (_b = (_a = editingState[id]) === null || _a === void 0 ? void 0 : _a[field]) !== null && _b !== void 0 ? _b : null;
    }, [apiRef]);
    var editingSharedApi = {
        isCellEditable: isCellEditable,
        setEditCellValue: setEditCellValue,
        getRowWithUpdatedValues: getRowWithUpdatedValues,
        unstable_getEditCellMeta: getEditCellMeta,
    };
    var editingSharedPrivateApi = {
        runPendingEditCellValueMutation: runPendingEditCellValueMutation,
    };
    (0, useGridApiMethod_1.useGridApiMethod)(apiRef, editingSharedApi, 'public');
    (0, useGridApiMethod_1.useGridApiMethod)(apiRef, editingSharedPrivateApi, 'private');
};
exports.useGridEditing = useGridEditing;

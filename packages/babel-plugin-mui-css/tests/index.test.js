import { resolve, basename, dirname } from 'node:path';
import { readFileSync, writeFileSync } from 'node:fs';
import { execSync } from 'node:child_process';
import { expect } from 'chai';
import outdent from 'outdent';
import { mkdirp } from 'mkdirp';
import rimraf from 'rimraf';

const RUNTIME_DIR = resolve(import.meta.dirname, './runtime');
const INPUT_PACK = resolve(RUNTIME_DIR, './package.json');
const INPUT_CONF = resolve(RUNTIME_DIR, './mui-css.config.json');
const INPUT_BABEL = resolve(RUNTIME_DIR, './babel-config.json');
const INPUT_VARS = resolve(RUNTIME_DIR, './vars.ts');
const OUTPUT_DIR = resolve(RUNTIME_DIR, './output');

// prettier-ignore
describe('babel-plugin-mui-css', () => {
  // opts: { files, config, js, css, vars }
  function transform(opts) {
    writeFileSync(INPUT_PACK, JSON.stringify({
      name: 'test',
      version: '0.0.0',
      private: true,
      main: './src/index.js'
    }));
    writeFileSync(INPUT_VARS, opts.vars ?? '');

    const files = opts.files;

    files.forEach(file => {
      file.path = resolve(RUNTIME_DIR, 'src', file.name)
      writeFileSync(file.path, outdent.string(file.input));
    })

    writeFileSync(INPUT_BABEL, JSON.stringify({
      plugins: [
        resolve(import.meta.dirname, '../build/index.js'),
      ],
    }));

    writeFileSync(INPUT_CONF, JSON.stringify({
      cssMinify: false,
      cssVariables: INPUT_VARS,
      ...opts.config,
    }));

    const args = [
      '--verbose',
      '--extensions', '".js"',
      resolve(RUNTIME_DIR, 'src'),
      '--config-file', INPUT_BABEL,
      '--out-dir', OUTPUT_DIR,
      '--ignore', '*.ts',
    ];

    const command = `cd "${RUNTIME_DIR}" && pnpm exec babel ${args.join(' ')}`;

    // const output =
    execSync(command, { env: { ...process.env, ...opts.env } });
    // console.log(output.toString())


    files.forEach((file, i) => {
      const output = readFileSync(resolve(OUTPUT_DIR, file.name)).toString()

      expect(output).to.be.equal(outdent.string(file.output));

      if (file.css) {
        const cssFilename = `${file.name.split('.').slice(0, -1).join('.')}.autogenerated.css`;
        const cssFilepath = resolve(dirname(file.path), cssFilename);
        const resultCSS = readFileSync(cssFilepath).toString();
        expect(resultCSS).to.be.equal(outdent.string(file.css));
      }
    })
  }

  beforeEach(() => {
    rimraf.sync(RUNTIME_DIR);
    mkdirp.sync(resolve(RUNTIME_DIR, 'src'));
    mkdirp.sync(resolve(RUNTIME_DIR, 'output'));
  });

  after(() => {
    rimraf.sync(RUNTIME_DIR);
  });

  it('works', () => {
    transform({
      files: [{
        name: 'index.js',
        input: js`
          const styles = css('MuiDataGrid-panel', {
            root: {
              border: '1px solid black',
            },
            focused: {
              border: '1px solid blue',
            },
          })
        `,
        output: js`
          import "./index.autogenerated.css";
          const styles = {
            "root": "MuiDataGrid-panel",
            "focused": "MuiDataGrid-panel--focused"
          };
        `,
        css: css`
          .MuiDataGrid-panel { border:1px solid black; }
          .MuiDataGrid-panel--focused { border:1px solid blue; }
        `
      }],
    });
  });

  it('transforms nested selectors', () => {
    transform({
      files: [{
        name: 'index.js',
        input: js`
          const styles = css('MuiDataGrid-panel', {
            root: {
              '#id': {
                color: 'black',
              },
              '.class-a': {
                color: 'black',
              },
              '&.class-b': {
                color: 'black',
              },
              '> input': {
                color: 'black',
              },
            }
          })
        `,
        output: js`
          import "./index.autogenerated.css";
          const styles = {
            "root": "MuiDataGrid-panel"
          };
        `,
        css: css`
          .MuiDataGrid-panel {  }
          .MuiDataGrid-panel #id { color:black; }
          .MuiDataGrid-panel .class-a { color:black; }
          .MuiDataGrid-panel.class-b { color:black; }
          .MuiDataGrid-panel > input { color:black; }
        `,
      }]
    });
  });

  it('supports CSS variables', () => {
    transform({
      vars: ts`
        export const vars = {
          color: {
            primary: 'var(--color-primary)',
          },
        } as const;
      `,
      files: [{
        name: 'index.js',
        input: js`
          const styles = css('MuiDataGrid-panel', {
            root: {
              color: vars.color.primary,
            },
          })
        `,
        output: js`
          import "./index.autogenerated.css";
          const styles = {
            "root": "MuiDataGrid-panel"
          };
        `,
        css: css`
          .MuiDataGrid-panel { color:var(--color-primary); }
        `,
      }]
    });
  });

  it('supports minification', () => {
    transform({
      config: { cssMinify: true },
      files: [{
        name: 'index.js',
        input: js`
          const styles = css('MuiDataGrid-panel', {
            root: {
              '#id': {
                color: 'black',
              },
              '.class-a': {
                color: 'black',
              },
              '&.class-b': {
                color: 'black',
              },
              '> input': {
                color: 'black',
              },
            }
          })
        `,
        output: js`
          import "./index.autogenerated.css";
          const styles = {
            "root": "MuiDataGrid-panel"
          };
        `,
        css: css`
          .MuiDataGrid-panel #id,.MuiDataGrid-panel .class-a,.MuiDataGrid-panel.class-b,.MuiDataGrid-panel>input{color:#000}
        `,
      }]
    });
  });

  it('orders calls correctly', () => {
    transform({
      files: [
        {
          name: 'index.js',
          input: js`
            import { aStyles } from './a.js'

            const indexStyles = css('Styles-index', {
              root: {
                color: 'indigo',
              }
            })
          `,
          output: js`
            import "./index.autogenerated.css";
            import { aStyles } from './a.js';
            const indexStyles = {
              "root": "Styles-index"
            };
          `,
          css: css`
            .Styles-index { color:indigo; }
          `
        },
        {
          name: 'a.js',
          input: js`
            import { bStyles } from './b.js'

            export const aStyles = css('Styles-a', {
              root: {
                color: 'almond',
              }
            })
          `,
          output: js`
            import "./a.autogenerated.css";
            import { bStyles } from './b.js';
            export const aStyles = {
              "root": "Styles-a"
            };
          `,
          css: css`
            .Styles-a { color:almond; }
          `,
        },
        {
          name: 'b.js',
          input: js`
            export const bStyles = css('Styles-b', {
              root: {
                color: 'beet',
              }
            })
          `,
          output: js`
            import "./b.autogenerated.css";
            export const bStyles = {
              "root": "Styles-b"
            };
          `,
          css: css`
            .Styles-b { color:beet; }
          `,
        },
      ],
    });
  });
});

function js(strings) {
  return strings[0];
}
function ts(strings) {
  return strings[0];
}
function css(strings) {
  return strings[0];
}

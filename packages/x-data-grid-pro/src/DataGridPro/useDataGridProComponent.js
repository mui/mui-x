"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDataGridProComponent = void 0;
var React = require("react");
var internals_1 = require("@mui/x-data-grid/internals");
// Pro-only features
var useGridInfiniteLoader_1 = require("../hooks/features/infiniteLoader/useGridInfiniteLoader");
var useGridColumnReorder_1 = require("../hooks/features/columnReorder/useGridColumnReorder");
var useGridTreeData_1 = require("../hooks/features/treeData/useGridTreeData");
var useGridTreeDataPreProcessors_1 = require("../hooks/features/treeData/useGridTreeDataPreProcessors");
var useGridDataSourceTreeDataPreProcessors_1 = require("../hooks/features/serverSideTreeData/useGridDataSourceTreeDataPreProcessors");
var useGridColumnPinning_1 = require("../hooks/features/columnPinning/useGridColumnPinning");
var useGridColumnPinningPreProcessors_1 = require("../hooks/features/columnPinning/useGridColumnPinningPreProcessors");
var useGridDetailPanel_1 = require("../hooks/features/detailPanel/useGridDetailPanel");
var useGridDetailPanelPreProcessors_1 = require("../hooks/features/detailPanel/useGridDetailPanelPreProcessors");
var useGridRowReorder_1 = require("../hooks/features/rowReorder/useGridRowReorder");
var useGridRowReorderPreProcessors_1 = require("../hooks/features/rowReorder/useGridRowReorderPreProcessors");
var useGridLazyLoader_1 = require("../hooks/features/lazyLoader/useGridLazyLoader");
var useGridLazyLoaderPreProcessors_1 = require("../hooks/features/lazyLoader/useGridLazyLoaderPreProcessors");
var useGridRowPinning_1 = require("../hooks/features/rowPinning/useGridRowPinning");
var useGridRowPinningPreProcessors_1 = require("../hooks/features/rowPinning/useGridRowPinningPreProcessors");
var useGridDataSourcePro_1 = require("../hooks/features/dataSource/useGridDataSourcePro");
var useGridDataSourceLazyLoader_1 = require("../hooks/features/serverSideLazyLoader/useGridDataSourceLazyLoader");
var useGridInfiniteLoadingIntersection_1 = require("../hooks/features/serverSideLazyLoader/useGridInfiniteLoadingIntersection");
var useDataGridProComponent = function (apiRef, props) {
    (0, internals_1.useGridInitialization)(apiRef, props);
    /**
     * Register all pre-processors called during state initialization here.
     * Some pre-processors are changing the same part of the state (like the order of the columns).
     * Order them in descending order of priority.
     * For example, left pinned columns should always render first from the left, so the `hydrateColumns` pre-processor from `useGridColumnPinningPreProcessors` should be called last (after all other `hydrateColumns` pre-processors).
     * Similarly, the `hydrateColumns` pre-processor from `useGridRowSelectionPreProcessors` should be called after `useGridTreeDataPreProcessors` because the selection checkboxes should appear before the tree data.
     * Desired autogenerated columns order is:
     * left pinned columns -> row reordering column -> checkbox column -> tree data column -> master detail column -> rest of the columns
     */
    (0, useGridDetailPanelPreProcessors_1.useGridDetailPanelPreProcessors)(apiRef, props);
    (0, useGridTreeDataPreProcessors_1.useGridTreeDataPreProcessors)(apiRef, props);
    (0, useGridDataSourceTreeDataPreProcessors_1.useGridDataSourceTreeDataPreProcessors)(apiRef, props);
    (0, internals_1.useGridRowSelectionPreProcessors)(apiRef, props);
    (0, useGridLazyLoaderPreProcessors_1.useGridLazyLoaderPreProcessors)(apiRef, props);
    (0, useGridRowPinningPreProcessors_1.useGridRowPinningPreProcessors)(apiRef);
    (0, useGridRowReorderPreProcessors_1.useGridRowReorderPreProcessors)(apiRef, props);
    (0, useGridColumnPinningPreProcessors_1.useGridColumnPinningPreProcessors)(apiRef, props);
    (0, internals_1.useGridRowsPreProcessors)(apiRef);
    /**
     * Register all state initializers here.
     */
    (0, internals_1.useGridInitializeState)(internals_1.propsStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.headerFilteringStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.rowSelectionStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(useGridRowReorder_1.rowReorderStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(useGridDetailPanel_1.detailPanelStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(useGridColumnPinning_1.columnPinningStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.columnsStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(useGridRowPinning_1.rowPinningStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.rowsStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.paginationStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.editingStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.focusStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.sortingStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.preferencePanelStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.filterStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.rowSpanningStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.densityStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(useGridColumnReorder_1.columnReorderStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.columnResizeStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.columnMenuStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.columnGroupsStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.virtualizationStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(useGridDataSourcePro_1.dataSourceStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.dimensionsStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.rowsMetaStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.listViewStateInitializer, apiRef, props);
    (0, internals_1.useGridVirtualizer)(apiRef, props);
    (0, internals_1.useGridHeaderFiltering)(apiRef, props);
    (0, useGridTreeData_1.useGridTreeData)(apiRef, props);
    (0, internals_1.useGridKeyboardNavigation)(apiRef, props);
    (0, internals_1.useGridRowSelection)(apiRef, props);
    (0, useGridColumnPinning_1.useGridColumnPinning)(apiRef, props);
    (0, useGridRowPinning_1.useGridRowPinning)(apiRef, props);
    (0, internals_1.useGridColumns)(apiRef, props);
    (0, internals_1.useGridRows)(apiRef, props);
    (0, internals_1.useGridRowSpanning)(apiRef, props);
    (0, internals_1.useGridParamsApi)(apiRef, props);
    (0, useGridDetailPanel_1.useGridDetailPanel)(apiRef, props);
    (0, internals_1.useGridColumnSpanning)(apiRef);
    (0, internals_1.useGridColumnGrouping)(apiRef, props);
    (0, internals_1.useGridEditing)(apiRef, props);
    (0, internals_1.useGridFocus)(apiRef, props);
    (0, internals_1.useGridPreferencesPanel)(apiRef, props);
    (0, internals_1.useGridFilter)(apiRef, props);
    (0, internals_1.useGridSorting)(apiRef, props);
    (0, internals_1.useGridDensity)(apiRef, props);
    (0, useGridColumnReorder_1.useGridColumnReorder)(apiRef, props);
    (0, internals_1.useGridColumnResize)(apiRef, props);
    (0, internals_1.useGridPagination)(apiRef, props);
    (0, internals_1.useGridRowsMeta)(apiRef, props);
    (0, useGridRowReorder_1.useGridRowReorder)(apiRef, props);
    (0, internals_1.useGridScroll)(apiRef, props);
    (0, useGridInfiniteLoader_1.useGridInfiniteLoader)(apiRef, props);
    (0, useGridLazyLoader_1.useGridLazyLoader)(apiRef, props);
    (0, useGridDataSourceLazyLoader_1.useGridDataSourceLazyLoader)(apiRef, props);
    (0, useGridInfiniteLoadingIntersection_1.useGridInfiniteLoadingIntersection)(apiRef, props);
    (0, internals_1.useGridColumnMenu)(apiRef);
    (0, internals_1.useGridCsvExport)(apiRef, props);
    (0, internals_1.useGridPrintExport)(apiRef, props);
    (0, internals_1.useGridClipboard)(apiRef, props);
    (0, internals_1.useGridDimensions)(apiRef, props);
    (0, internals_1.useGridEvents)(apiRef, props);
    (0, internals_1.useGridStatePersistence)(apiRef);
    (0, internals_1.useGridVirtualization)(apiRef, props);
    (0, useGridDataSourcePro_1.useGridDataSourcePro)(apiRef, props);
    (0, internals_1.useGridListView)(apiRef, props);
    // Should be the last thing to run, because all pre-processors should have been registered by now.
    React.useEffect(function () {
        apiRef.current.runAppliersForPendingProcessors();
    });
};
exports.useDataGridProComponent = useDataGridProComponent;

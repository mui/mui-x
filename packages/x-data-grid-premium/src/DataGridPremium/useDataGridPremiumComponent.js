"use strict";
'use client';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDataGridPremiumComponent = void 0;
var React = require("react");
var internals_1 = require("@mui/x-data-grid-pro/internals");
var x_data_grid_pro_1 = require("@mui/x-data-grid-pro");
var useGridDataSourcePremium_1 = require("../hooks/features/dataSource/useGridDataSourcePremium");
// Premium-only features
var useGridAggregation_1 = require("../hooks/features/aggregation/useGridAggregation");
var useGridAggregationPreProcessors_1 = require("../hooks/features/aggregation/useGridAggregationPreProcessors");
var useGridRowGrouping_1 = require("../hooks/features/rowGrouping/useGridRowGrouping");
var useGridRowGroupingPreProcessors_1 = require("../hooks/features/rowGrouping/useGridRowGroupingPreProcessors");
var useGridDataSourceRowGroupingPreProcessors_1 = require("../hooks/features/rowGrouping/useGridDataSourceRowGroupingPreProcessors");
var useGridExcelExport_1 = require("../hooks/features/export/useGridExcelExport");
var useGridCellSelection_1 = require("../hooks/features/cellSelection/useGridCellSelection");
var useGridClipboardImport_1 = require("../hooks/features/clipboard/useGridClipboardImport");
var useGridPivoting_1 = require("../hooks/features/pivoting/useGridPivoting");
var gridPivotingSelectors_1 = require("../hooks/features/pivoting/gridPivotingSelectors");
var useGridAiAssistant_1 = require("../hooks/features/aiAssistant/useGridAiAssistant");
var useGridSidebar_1 = require("../hooks/features/sidebar/useGridSidebar");
var useDataGridPremiumComponent = function (apiRef, inProps) {
    var pivotPropsOverrides = (0, x_data_grid_pro_1.useGridSelector)(apiRef, gridPivotingSelectors_1.gridPivotPropsOverridesSelector);
    var props = React.useMemo(function () {
        if (pivotPropsOverrides) {
            return __assign(__assign(__assign({}, inProps), pivotPropsOverrides), { initialState: __assign(__assign({}, inProps.initialState), { columns: undefined }) });
        }
        return inProps;
    }, [inProps, pivotPropsOverrides]);
    (0, internals_1.useGridInitialization)(apiRef, props);
    var key = pivotPropsOverrides ? 'pivoting' : undefined;
    /**
     * Register all pre-processors called during state initialization here.
     * Some pre-processors are changing the same part of the state (like the order of the columns).
     * Order them in descending order of priority.
     * For example, left pinned columns should always render first from the left, so the `hydrateColumns` pre-processor from `useGridColumnPinningPreProcessors` should be called last (after all other `hydrateColumns` pre-processors).
     * Similarly, the `hydrateColumns` pre-processor from `useGridRowSelectionPreProcessors` should be called after `useGridRowGroupingPreProcessors` because the selection checkboxes should appear before the grouping columns.
     * Desired autogenerated columns order is:
     * left pinned columns -> row reordering column -> checkbox column -> tree data / row grouping column -> master detail column -> rest of the columns
     */
    (0, internals_1.useGridDetailPanelPreProcessors)(apiRef, props);
    (0, useGridRowGroupingPreProcessors_1.useGridRowGroupingPreProcessors)(apiRef, props);
    (0, useGridDataSourceRowGroupingPreProcessors_1.useGridDataSourceRowGroupingPreProcessors)(apiRef, props);
    (0, internals_1.useGridTreeDataPreProcessors)(apiRef, props);
    (0, internals_1.useGridDataSourceTreeDataPreProcessors)(apiRef, props);
    (0, internals_1.useGridRowSelectionPreProcessors)(apiRef, props);
    (0, internals_1.useGridLazyLoaderPreProcessors)(apiRef, props);
    (0, internals_1.useGridRowPinningPreProcessors)(apiRef);
    (0, useGridAggregationPreProcessors_1.useGridAggregationPreProcessors)(apiRef, props);
    (0, internals_1.useGridRowReorderPreProcessors)(apiRef, props);
    (0, internals_1.useGridColumnPinningPreProcessors)(apiRef, props);
    (0, internals_1.useGridRowsPreProcessors)(apiRef);
    /**
     * Register all state initializers here.
     */
    (0, internals_1.useGridInitializeState)(internals_1.propsStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.headerFilteringStateInitializer, apiRef, props, key);
    (0, internals_1.useGridInitializeState)(useGridRowGrouping_1.rowGroupingStateInitializer, apiRef, props, key);
    (0, internals_1.useGridInitializeState)(useGridAggregation_1.aggregationStateInitializer, apiRef, props, key);
    (0, internals_1.useGridInitializeState)(internals_1.rowSelectionStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.rowReorderStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(useGridCellSelection_1.cellSelectionStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.detailPanelStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.columnPinningStateInitializer, apiRef, props, key);
    (0, internals_1.useGridInitializeState)(internals_1.columnsStateInitializer, apiRef, props, key);
    (0, internals_1.useGridInitializeState)(useGridSidebar_1.sidebarStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(useGridPivoting_1.pivotingStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.rowPinningStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.rowsStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.paginationStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.editingStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.focusStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.sortingStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.preferencePanelStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.filterStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.rowSpanningStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.densityStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.columnReorderStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.columnResizeStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.columnMenuStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.columnGroupsStateInitializer, apiRef, props, key);
    (0, internals_1.useGridInitializeState)(internals_1.virtualizationStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.dataSourceStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.dimensionsStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.rowsMetaStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(internals_1.listViewStateInitializer, apiRef, props);
    (0, internals_1.useGridInitializeState)(useGridAiAssistant_1.aiAssistantStateInitializer, apiRef, props);
    (0, internals_1.useGridVirtualizer)(apiRef, props);
    (0, useGridSidebar_1.useGridSidebar)(apiRef, props);
    (0, useGridPivoting_1.useGridPivoting)(apiRef, props, inProps.columns, inProps.rows);
    (0, useGridRowGrouping_1.useGridRowGrouping)(apiRef, props);
    (0, internals_1.useGridHeaderFiltering)(apiRef, props);
    (0, internals_1.useGridTreeData)(apiRef, props);
    (0, useGridAggregation_1.useGridAggregation)(apiRef, props);
    (0, internals_1.useGridKeyboardNavigation)(apiRef, props);
    (0, internals_1.useGridRowSelection)(apiRef, props);
    (0, useGridCellSelection_1.useGridCellSelection)(apiRef, props);
    (0, internals_1.useGridColumnPinning)(apiRef, props);
    (0, internals_1.useGridRowPinning)(apiRef, props);
    (0, internals_1.useGridColumns)(apiRef, props);
    (0, internals_1.useGridRows)(apiRef, props);
    (0, internals_1.useGridRowSpanning)(apiRef, props);
    (0, internals_1.useGridParamsApi)(apiRef, props);
    (0, internals_1.useGridDetailPanel)(apiRef, props);
    (0, internals_1.useGridColumnSpanning)(apiRef);
    (0, internals_1.useGridColumnGrouping)(apiRef, props);
    (0, useGridClipboardImport_1.useGridClipboardImport)(apiRef, props);
    (0, internals_1.useGridEditing)(apiRef, props);
    (0, internals_1.useGridFocus)(apiRef, props);
    (0, internals_1.useGridPreferencesPanel)(apiRef, props);
    (0, internals_1.useGridFilter)(apiRef, props);
    (0, internals_1.useGridSorting)(apiRef, props);
    (0, internals_1.useGridDensity)(apiRef, props);
    (0, internals_1.useGridColumnReorder)(apiRef, props);
    (0, internals_1.useGridColumnResize)(apiRef, props);
    (0, internals_1.useGridPagination)(apiRef, props);
    (0, internals_1.useGridRowsMeta)(apiRef, props);
    (0, internals_1.useGridRowReorder)(apiRef, props);
    (0, internals_1.useGridScroll)(apiRef, props);
    (0, internals_1.useGridInfiniteLoader)(apiRef, props);
    (0, internals_1.useGridLazyLoader)(apiRef, props);
    (0, internals_1.useGridDataSourceLazyLoader)(apiRef, props);
    (0, internals_1.useGridInfiniteLoadingIntersection)(apiRef, props);
    (0, internals_1.useGridColumnMenu)(apiRef);
    (0, internals_1.useGridCsvExport)(apiRef, props);
    (0, internals_1.useGridPrintExport)(apiRef, props);
    (0, useGridExcelExport_1.useGridExcelExport)(apiRef, props);
    (0, internals_1.useGridClipboard)(apiRef, props);
    (0, internals_1.useGridDimensions)(apiRef, props);
    (0, internals_1.useGridEvents)(apiRef, props);
    (0, internals_1.useGridStatePersistence)(apiRef);
    (0, useGridDataSourcePremium_1.useGridDataSourcePremium)(apiRef, props);
    (0, internals_1.useGridVirtualization)(apiRef, props);
    (0, internals_1.useGridListView)(apiRef, props);
    (0, useGridAiAssistant_1.useGridAiAssistant)(apiRef, props);
    (0, useGridPivoting_1.useGridPivotingExportState)(apiRef);
    // Should be the last thing to run, because all pre-processors should have been registered by now.
    React.useEffect(function () {
        apiRef.current.runAppliersForPendingProcessors();
    });
    return props;
};
exports.useDataGridPremiumComponent = useDataGridPremiumComponent;
